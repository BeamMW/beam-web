[{"data":1,"prerenderedAt":346},["Reactive",2],{"content-query-P1VXJYJwo8":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":7,"body":9,"_type":341,"_id":342,"_source":343,"_file":344,"_extension":345},"/docs/core-tech/programming-beam-terms-and-concepts","core-tech",false,"","Programming Beam Terms And Concepts",{"type":10,"children":11,"toc":322},"root",[12,24,29,36,41,47,63,69,91,97,102,108,122,128,149,155,169,175,192,198,203,209,237,243,248,254,268,274,290,296,301,307],{"type":13,"tag":14,"props":15,"children":16},"element","blockquote",{},[17],{"type":13,"tag":18,"props":19,"children":20},"p",{},[21],{"type":22,"value":23},"text","The following document is still under construction and is subject to changes",{"type":13,"tag":18,"props":25,"children":26},{},[27],{"type":22,"value":28},"This page presents a list of terms and concepts used in Beam code",{"type":13,"tag":30,"props":31,"children":33},"h3",{"id":32},"address",[34],{"type":22,"value":35},"Address",{"type":13,"tag":18,"props":37,"children":38},{},[39],{"type":22,"value":40},"In Mimblewimble, unlike most other cryptocurrencies there are no addresses stored in the blockchian. However the Wallets still should be able to communicate to interactively create a transaction. Which is why in Beam, we provide the Secure Bulletin Board System (SBBS ) which allows wallets to send encrypted messages to each other via Beam Nodes. In SBBS=, each wallet is identified by one or more SBBS Addresses. Each Address is represented by a private/public key pair. All addreses are derived from the seed phrase, using a separate key chain, and are only stored in the wallet (not on the blockchain)",{"type":13,"tag":30,"props":42,"children":44},{"id":43},"atomic-swap",[45],{"type":22,"value":46},"Atomic Swap",{"type":13,"tag":18,"props":48,"children":49},{},[50,52,61],{"type":22,"value":51},"Atomic Swap is an algorithm that allows to exchange value between two independent blockchains (for example Bitcoin and Beam) without having to rely on a centralized entity, such as exchange or any of the parties participating in the exchange. Atomic Swap is based on an ability to lock funds using Hash and Time Lock Contracts (",{"type":13,"tag":53,"props":54,"children":58},"a",{"href":55,"rel":56},"https://en.bitcoin.it/wiki/Hash_Time_Locked_Contracts",[57],"nofollow",[59],{"type":22,"value":60},"HTLC",{"type":22,"value":62}," ) on both chains.",{"type":13,"tag":30,"props":64,"children":66},{"id":65},"bulletproofs",[67],{"type":22,"value":68},"Bulletproofs",{"type":13,"tag":18,"props":70,"children":71},{},[72,74,80,82,89],{"type":22,"value":73},"Each UTXO, though confidential, should be a representation of a positive value. Creating negative coins could break the protocol and allow for arbitrary inflation. To prove that value is positive without revealing the value itself, Beam uses an implementation of the non interactive zero knowledge proof algorithm knows as ",{"type":13,"tag":53,"props":75,"children":78},{"href":76,"rel":77},"https://eprint.iacr.org/2017/1066.pdf",[57],[79],{"type":22,"value":68},{"type":22,"value":81},". Beam is using its own ",{"type":13,"tag":53,"props":83,"children":86},{"href":84,"rel":85},"https://github.com/BeamMW/beam/blob/master/core/ecc_bulletproof.cpp",[57],[87],{"type":22,"value":88},"implementation",{"type":22,"value":90}," of Bulletproofs.",{"type":13,"tag":30,"props":92,"children":94},{"id":93},"coin",[95],{"type":22,"value":96},"Coin",{"type":13,"tag":18,"props":98,"children":99},{},[100],{"type":22,"value":101},"Internal representation of the single commitment for specific value in Beam Wallet. In reality, key id and value are stored and the actual blinding factors are generated each time. More detailed explanation on this structure is provided below",{"type":13,"tag":30,"props":103,"children":105},{"id":104},"dandelion",[106],{"type":22,"value":107},"Dandelion",{"type":13,"tag":18,"props":109,"children":110},{},[111,113,120],{"type":22,"value":112},"An improvement of the basic P2P layer 'gossip' style protocol ",{"type":13,"tag":53,"props":114,"children":117},{"href":115,"rel":116},"https://arxiv.org/abs/1805.11060",[57],[118],{"type":22,"value":119},"whitepaper",{"type":22,"value":121}," making tracing of transaction source much more difficult through introduction of two phase transaction propagation. In 'Stem' phase, the transaction is sent through a series of random peers, during which each peer decides with a given probability whether to continue the 'Stem' or whether to 'Fluff'. In 'Fluff' phrase the transaction is broadcast to all known peers, effectively falling back to 'gossip' for transaction propagation.",{"type":13,"tag":30,"props":123,"children":125},{"id":124},"elliptic-curve",[126],{"type":22,"value":127},"Elliptic Curve",{"type":13,"tag":18,"props":129,"children":130},{},[131,133,140,142],{"type":22,"value":132},"Beam makes heavy use of ",{"type":13,"tag":53,"props":134,"children":137},{"href":135,"rel":136},"https://en.wikipedia.org/wiki/Elliptic-curve_cryptography",[57],[138],{"type":22,"value":139},"Elliptic Curve Cryptography",{"type":22,"value":141},". Beam uses the ",{"type":13,"tag":53,"props":143,"children":146},{"href":144,"rel":145},"https://en.bitcoin.it/wiki/Secp256k1",[57],[147],{"type":22,"value":148},"same curve as Bitcoin",{"type":13,"tag":30,"props":150,"children":152},{"id":151},"equihash",[153],{"type":22,"value":154},"Equihash",{"type":13,"tag":18,"props":156,"children":157},{},[158,160,167],{"type":22,"value":159},"Beam uses Equihash Proof of Work mining algorithm. ",{"type":13,"tag":53,"props":161,"children":164},{"href":162,"rel":163},"https://en.wikipedia.org/wiki/Equihash",[57],[165],{"type":22,"value":166},"description",{"type":22,"value":168},".",{"type":13,"tag":30,"props":170,"children":172},{"id":171},"fly-client",[173],{"type":22,"value":174},"Fly Client",{"type":13,"tag":18,"props":176,"children":177},{},[178,180],{"type":22,"value":179},"In Beam implementation FlyClient protocol (located in project core) provides an abstraction for communication with either 'own' node and 'untrusted' node and hides implementation details from the Wallet. ",{"type":13,"tag":181,"props":182,"children":183},"span",{},[184,186],{"type":22,"value":185}," ",{"type":13,"tag":53,"props":187,"children":190},{"href":188,"rel":189},"https://github.com/BeamMW/beam/blob/master/core/fly_client.h",[57],[191],{"type":22,"value":88},{"type":13,"tag":30,"props":193,"children":195},{"id":194},"kidf",[196],{"type":22,"value":197},"KIDF",{"type":13,"tag":18,"props":199,"children":200},{},[201],{"type":22,"value":202},"Hierarchical key generator that allows to create new private and public keys from the master secret, generated from the seed_phrase and specific key index.",{"type":13,"tag":30,"props":204,"children":206},{"id":205},"merkle-tree",[207],{"type":22,"value":208},"Merkle Tree",{"type":13,"tag":18,"props":210,"children":211},{},[212,218,220,227,229,235],{"type":13,"tag":53,"props":213,"children":216},{"href":214,"rel":215},"https://en.wikipedia.org/wiki/Merkle_tree",[57],[217],{"type":22,"value":208},{"type":22,"value":219}," is a data structure representing a binary tree in which each non leaf node holds a cryptographic hash or the child nodes and which provides an efficient way to prove that a certain element is present in the tree in logarithmic time. In Beam, Merkle Tree is based on a ",{"type":13,"tag":53,"props":221,"children":224},{"href":222,"rel":223},"https://github.com/BeamMW/beam/blob/master/core/radixtree.h",[57],[225],{"type":22,"value":226},"Radix tree",{"type":22,"value":228},", in which the order of nodes is independent of the order in which the values were entered into the tree. Beam ",{"type":13,"tag":53,"props":230,"children":233},{"href":231,"rel":232},"https://github.com/BeamMW/beam/blob/master/core/merkle.h",[57],[234],{"type":22,"value":88},{"type":22,"value":236}," uses generalized concept of Merkle Mountain Range, which can be seen as a collection fo Merkle Trees",{"type":13,"tag":30,"props":238,"children":240},{"id":239},"own-node",[241],{"type":22,"value":242},"Own node",{"type":13,"tag":18,"props":244,"children":245},{},[246],{"type":22,"value":247},"Beam wallet has two key modes of operation one with 'own' (trusted) node and one with 'untrusted' node. Regardless whether local or remote, the 'own' node knows the 'owner key' which is generated from the seed phrase and is used to tag specific UTXOs that belong to the wallet. In this case the node is considered trusted and the information received from it is treated accordindly. In case of the untrusted node, Beam Wallet employ the protocol called ChainWork (an implementation of the FlyClient idea by Benedict Bunz) which implements compact and reliable way of validation the information sent by the Node.",{"type":13,"tag":30,"props":249,"children":251},{"id":250},"peer",[252],{"type":22,"value":253},"Peer",{"type":13,"tag":18,"props":255,"children":256},{},[257,259,266],{"type":22,"value":258},"In the context of Node to Node communications, each node is a Peer for all others. Node stores and manages the list of Peers it is currently connected to and uses this list to propagate transactions and blocks. ",{"type":13,"tag":53,"props":260,"children":263},{"href":261,"rel":262},"https://github.com/BeamMW/beam/blob/master/core/peer_manager.h",[57],[264],{"type":22,"value":265},"Peer Manager",{"type":22,"value":267}," implements the logic of rating Peers and preferring those that are quicker to respond and provide valid information.",{"type":13,"tag":30,"props":269,"children":271},{"id":270},"sbbs",[272],{"type":22,"value":273},"SBBS",{"type":13,"tag":18,"props":275,"children":276},{},[277,279],{"type":22,"value":278},"SBBS stands for Secure Bulletin Board System and provides an infrastructure for sending secure and encrypted messages between Beam Wallets to create a transaction. SBBS is part of the Beam Node. Each Address in the SBBS represents a private / public key pair used for encrypting the messages. Each wallet listens to a number of SBBS channels, derived from the Address to reduce the load on the wallet ",{"type":13,"tag":181,"props":280,"children":281},{},[282,283],{"type":22,"value":185},{"type":13,"tag":53,"props":284,"children":287},{"href":285,"rel":286},"https://github.com/BeamMW/beam/blob/master/core/proto.h",[57],[288],{"type":22,"value":289},"protocol",{"type":13,"tag":30,"props":291,"children":293},{"id":292},"seed-phrase",[294],{"type":22,"value":295},"Seed Phrase",{"type":13,"tag":18,"props":297,"children":298},{},[299],{"type":22,"value":300},"This is the most secret key generated from the 12 word seed phrase. Using the seed phrase only it is always possible to reconstruct the entire UTXO set directly from the blockchain. In fact, this is the only information that can be extracted from the blockchain, all the other data including transaction history should be stored locally in the wallet.",{"type":13,"tag":30,"props":302,"children":304},{"id":303},"transaction",[305],{"type":22,"value":306},"Transaction",{"type":13,"tag":18,"props":308,"children":309},{},[310,312],{"type":22,"value":311},"In Mimblewimble transaction is created by both Sender and Receiver wallets and in its simplest form describes exchange of certain value between two (or more) participants. Unlike most other blockchains, transactions are actually meaningless in the context of the blockchain itself. They are however important in the context of the wallet. ",{"type":13,"tag":181,"props":313,"children":314},{},[315,316],{"type":22,"value":185},{"type":13,"tag":53,"props":317,"children":320},{"href":318,"rel":319},"https://github.com/BeamMW/beam/blob/master/wallet/base_transaction.h",[57],[321],{"type":22,"value":88},{"title":7,"searchDepth":323,"depth":323,"links":324},2,[325,327,328,329,330,331,332,333,334,335,336,337,338,339,340],{"id":32,"depth":326,"text":35},3,{"id":43,"depth":326,"text":46},{"id":65,"depth":326,"text":68},{"id":93,"depth":326,"text":96},{"id":104,"depth":326,"text":107},{"id":124,"depth":326,"text":127},{"id":151,"depth":326,"text":154},{"id":171,"depth":326,"text":174},{"id":194,"depth":326,"text":197},{"id":205,"depth":326,"text":208},{"id":239,"depth":326,"text":242},{"id":250,"depth":326,"text":253},{"id":270,"depth":326,"text":273},{"id":292,"depth":326,"text":295},{"id":303,"depth":326,"text":306},"markdown","content:docs:core-tech:Programming-Beam-Terms-and-Concepts.md","content","docs/core-tech/Programming-Beam-Terms-and-Concepts.md","md",1702260905621]