[{"data":1,"prerenderedAt":585},["Reactive",2],{"content-query-IWXXaFU4Ar":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":580,"_id":581,"_source":582,"_file":583,"_extension":584},"/docs/core-tech/cryptographic-primitives","core-tech",false,"","Cryptographic Primitives","Cryptographic primitives used by BEAM are based on the secp256k1 library (the one that is used in bitcoin). Naturally it uses the same elliptic curve equation. The following primitives are used directly:",{"type":11,"children":12,"toc":569},"root",[13,29,86,91,186,198,205,210,246,251,258,263,274,279,285,290,301,312,318,323,329,355,381,497,503,508],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18,21,27],{"type":19,"value":20},"text","Cryptographic primitives used by BEAM are based on the ",{"type":14,"tag":22,"props":23,"children":24},"code",{"className":7},[25],{"type":19,"value":26},"secp256k1",{"type":19,"value":28}," library (the one that is used in bitcoin). Naturally it uses the same elliptic curve equation. The following primitives are used directly:",{"type":14,"tag":30,"props":31,"children":32},"ul",{},[33,44,54,64,76],{"type":14,"tag":34,"props":35,"children":36},"li",{},[37,42],{"type":14,"tag":22,"props":38,"children":39},{"className":7},[40],{"type":19,"value":41},"secp256k1_gej",{"type":19,"value":43}," - Basic curve point arithmetics: point addition, doubling, negation, import/export to a platform-ndependent format.",{"type":14,"tag":34,"props":45,"children":46},{},[47,52],{"type":14,"tag":22,"props":48,"children":49},{"className":7},[50],{"type":19,"value":51},"secp256k1_scalar",{"type":19,"value":53}," - Scalar arithmetics: addition, multiplication, inverse",{"type":14,"tag":34,"props":55,"children":56},{},[57,62],{"type":14,"tag":22,"props":58,"children":59},{"className":7},[60],{"type":19,"value":61},"secp256k1_sha256_t",{"type":19,"value":63}," - SHA-256 hash",{"type":14,"tag":34,"props":65,"children":66},{},[67,69,74],{"type":19,"value":68},"Cryptographic nonce generation (",{"type":14,"tag":22,"props":70,"children":71},{"className":7},[72],{"type":19,"value":73},"nonce_function_rfc6979",{"type":19,"value":75},").",{"type":14,"tag":34,"props":77,"children":78},{},[79,84],{"type":14,"tag":22,"props":80,"children":81},{"className":7},[82],{"type":19,"value":83},"secp256k1_hmac_sha256_t",{"type":19,"value":85}," - HMAC (message authentication)",{"type":14,"tag":15,"props":87,"children":88},{},[89],{"type":19,"value":90},"The following cryptographic functions and schemes are built over them:",{"type":14,"tag":30,"props":92,"children":93},{},[94,161,166,171,176,181],{"type":14,"tag":34,"props":95,"children":96},{},[97,99],{"type":19,"value":98},"Point multiplication (by a scalar).\n",{"type":14,"tag":30,"props":100,"children":101},{},[102,125],{"type":14,"tag":34,"props":103,"children":104},{},[105,107],{"type":19,"value":106},"There are different multiplication modes and scenarios:\n",{"type":14,"tag":30,"props":108,"children":109},{},[110,115,120],{"type":14,"tag":34,"props":111,"children":112},{},[113],{"type":19,"value":114},"Secure/Fast",{"type":14,"tag":34,"props":116,"children":117},{},[118],{"type":19,"value":119},"Point may be either known in advance (a.k.a. Generator, prepared for multiplication) or \"casual\".",{"type":14,"tag":34,"props":121,"children":122},{},[123],{"type":19,"value":124},"Aggregation: when many points are multiplied by scalars and summed - an appropriate effective algorithm is used.",{"type":14,"tag":34,"props":126,"children":127},{},[128,130,134,136],{"type":19,"value":129},"The reason that this functionality is implemented in BEAM and not taken directly from ",{"type":14,"tag":22,"props":131,"children":132},{"className":7},[133],{"type":19,"value":26},{"type":19,"value":135}," is the following:\n",{"type":14,"tag":30,"props":137,"children":138},{},[139,144,156],{"type":14,"tag":34,"props":140,"children":141},{},[142],{"type":19,"value":143},"We'd like to have more low-level control of the primitives to implement advanced schemes",{"type":14,"tag":34,"props":145,"children":146},{},[147,149,154],{"type":19,"value":148},"We need more generators: Standard secp256k1 supports just two (",{"type":14,"tag":22,"props":150,"children":151},{"className":7},[152],{"type":19,"value":153},"G,H",{"type":19,"value":155},"), whereas we need many more (131)",{"type":14,"tag":34,"props":157,"children":158},{},[159],{"type":19,"value":160},"No effective aggregation implementation",{"type":14,"tag":34,"props":162,"children":163},{},[164],{"type":19,"value":165},"Commitments (encoded amount with the blinding factor)",{"type":14,"tag":34,"props":167,"children":168},{},[169],{"type":19,"value":170},"Schnorr's signatures (including multi-sig)",{"type":14,"tag":34,"props":172,"children":173},{},[174],{"type":19,"value":175},"Bulletproofs (including multi-sig and batch verification)",{"type":14,"tag":34,"props":177,"children":178},{},[179],{"type":19,"value":180},"Secure communication channels",{"type":14,"tag":34,"props":182,"children":183},{},[184],{"type":19,"value":185},"Secure BBS messaging system",{"type":14,"tag":15,"props":187,"children":188},{},[189,191,196],{"type":19,"value":190},"In addition there's a ",{"type":14,"tag":22,"props":192,"children":193},{"className":7},[194],{"type":19,"value":195},"uintBig",{"type":19,"value":197}," - a \"big integer\" (arbitrary width), supports basic arithmetics and shift operations (not including division). The number is represented as an array of bytes in a big-endian byte order. Platform-independent, serialized as-is.\nImplementation is very straight-forward, not for performance-critical tasks.",{"type":14,"tag":199,"props":200,"children":202},"h2",{"id":201},"hash",[203],{"type":19,"value":204},"Hash",{"type":14,"tag":15,"props":206,"children":207},{},[208],{"type":19,"value":209},"The Hash refers to the SHA-256 hash, unless otherwise specified. Used in various schemes. When hashing some data, it's fed in a way that is both platform-independent and unambiguous. This is achieved by the following specifications:",{"type":14,"tag":30,"props":211,"children":212},{},[213,218,223,236,241],{"type":14,"tag":34,"props":214,"children":215},{},[216],{"type":19,"value":217},"1-byte data is fed as-is",{"type":14,"tag":34,"props":219,"children":220},{},[221],{"type":19,"value":222},"Boolean values are encoded as a single byte with value either 0 or 1.",{"type":14,"tag":34,"props":224,"children":225},{},[226,228,234],{"type":19,"value":227},"Strings are fed as-is, ",{"type":14,"tag":229,"props":230,"children":231},"u",{},[232],{"type":19,"value":233},"including",{"type":19,"value":235}," the 0-terminator (to prevent ambiguity for consequent strings).",{"type":14,"tag":34,"props":237,"children":238},{},[239],{"type":19,"value":240},"Numerical types (fixed-point) are stored as a variable-length byte sequence, with a special terminator mark. This ensures platform independence (integers may have varying width across different platforms).",{"type":14,"tag":34,"props":242,"children":243},{},[244],{"type":19,"value":245},"Non-primitive types are converted into the platform-independent binary format for hashing.",{"type":14,"tag":15,"props":247,"children":248},{},[249],{"type":19,"value":250},"The following objects are derived from hash (built over them)",{"type":14,"tag":252,"props":253,"children":255},"h3",{"id":254},"oracle",[256],{"type":19,"value":257},"Oracle",{"type":14,"tag":15,"props":259,"children":260},{},[261],{"type":19,"value":262},"Oracle is used in non-interactive cryptographic proofs, it's supposed to produce cryptographic challenges in a deterministic way, based on the visible transcript to the moment.",{"type":14,"tag":15,"props":264,"children":265},{},[266,268,272],{"type":19,"value":267},"In BEAM Oracle uses the Hash in a straightforward way. All the visible transcript is hashed. Once the challenge is needed - the hash value is finalized, the result is the challenge, and it's immediately re-fed to the Hash. So that the new challenge construction (if needed) is generated from the visible transcript, ",{"type":14,"tag":229,"props":269,"children":270},{},[271],{"type":19,"value":233},{"type":19,"value":273}," the previous challenge.",{"type":14,"tag":15,"props":275,"children":276},{},[277],{"type":19,"value":278},"If there are restrictions for the challenge (such as it should be non-overflowing, non-zero scalar, or a valid x-coordinate of a curve point) - the Finalize-Re-feed is called in a loop, until the satisfying challenge is produced (i.e. accept/reject strategy is used).",{"type":14,"tag":252,"props":280,"children":282},{"id":281},"nonce-generator",[283],{"type":19,"value":284},"Nonce Generator",{"type":14,"tag":15,"props":286,"children":287},{},[288],{"type":19,"value":289},"Also used in cryptographic proofs, but, unlike Oracle, the nonce generation involves secret data, and should not be possible to reconstruct by others.",{"type":14,"tag":15,"props":291,"children":292},{},[293,295,299],{"type":19,"value":294},"In BEAM Nonce generator is a combination of an Oracle, and the nonce function initialized by the secret data. That is, the Oracle accounts for all the visible transcript. When a nonce is needed - first it's received from the Oracle, and then passed as an input to the nonce function (implemented in (",{"type":14,"tag":22,"props":296,"children":297},{"className":7},[298],{"type":19,"value":26},{"type":19,"value":300},"), which also uses the secret data.",{"type":14,"tag":15,"props":302,"children":303},{},[304,306,310],{"type":19,"value":305},"The final nonce generation function implemented in ",{"type":14,"tag":22,"props":307,"children":308},{"className":7},[309],{"type":19,"value":26},{"type":19,"value":311}," actually a modified HMAC-SHA-256 scheme.",{"type":14,"tag":252,"props":313,"children":315},{"id":314},"kdf-key-derivation-function",[316],{"type":19,"value":317},"KDF - Key derivation function",{"type":14,"tag":15,"props":319,"children":320},{},[321],{"type":19,"value":322},"All the private keys are generated via KDF. In BEAM it's implemented via the Nonce generator, which is initialized once by the master secret data. The requested key parameters (key index, type/subtype, etc.) are hashed and then the output is generated by the standard Nonce generator initialized with the master secret.",{"type":14,"tag":199,"props":324,"children":326},{"id":325},"schnorrs-signature",[327],{"type":19,"value":328},"Schnorr's signature",{"type":14,"tag":15,"props":330,"children":331},{},[332,334,339,341,346,348,353],{"type":19,"value":333},"Implemented according to the standard, the \"long\" version, compatible with batch verification. Consists of a pair ",{"type":14,"tag":22,"props":335,"children":336},{"className":7},[337],{"type":19,"value":338},"[P,k]",{"type":19,"value":340},", whereas ",{"type":14,"tag":22,"props":342,"children":343},{"className":7},[344],{"type":19,"value":345},"P",{"type":19,"value":347}," is an arbitrary EC point, and ",{"type":14,"tag":22,"props":349,"children":350},{"className":7},[351],{"type":19,"value":352},"k",{"type":19,"value":354}," is the blinded private key. Supports multisignature of course.",{"type":14,"tag":15,"props":356,"children":357},{},[358,360,365,367,372,374,379],{"type":19,"value":359},"Specifically the scheme is the following. Given a message hash ",{"type":14,"tag":22,"props":361,"children":362},{"className":7},[363],{"type":19,"value":364},"M",{"type":19,"value":366},", private key ",{"type":14,"tag":22,"props":368,"children":369},{"className":7},[370],{"type":19,"value":371},"sk",{"type":19,"value":373},", public key ",{"type":14,"tag":22,"props":375,"children":376},{"className":7},[377],{"type":19,"value":378},"pk = G * sk",{"type":19,"value":380},":",{"type":14,"tag":30,"props":382,"children":383},{},[384,462],{"type":14,"tag":34,"props":385,"children":386},{},[387,389],{"type":19,"value":388},"Prover\n",{"type":14,"tag":30,"props":390,"children":391},{},[392,410,420,430,442,452],{"type":14,"tag":34,"props":393,"children":394},{},[395,397,402,403,408],{"type":19,"value":396},"Generate a nonce ",{"type":14,"tag":22,"props":398,"children":399},{"className":7},[400],{"type":19,"value":401},"nk = Nonce(sk, M)",{"type":19,"value":340},{"type":14,"tag":22,"props":404,"children":405},{"className":7},[406],{"type":19,"value":407},"Nonce()",{"type":19,"value":409}," is the standard nonce generating function.",{"type":14,"tag":34,"props":411,"children":412},{},[413,415],{"type":19,"value":414},"Calculate: ",{"type":14,"tag":22,"props":416,"children":417},{"className":7},[418],{"type":19,"value":419},"P = nk*G",{"type":14,"tag":34,"props":421,"children":422},{},[423,425],{"type":19,"value":424},"Expose to Oracle: ",{"type":14,"tag":22,"props":426,"children":427},{"className":7},[428],{"type":19,"value":429},"P, M",{"type":14,"tag":34,"props":431,"children":432},{},[433,435,440],{"type":19,"value":434},"Get the challenge ",{"type":14,"tag":22,"props":436,"children":437},{"className":7},[438],{"type":19,"value":439},"e",{"type":19,"value":441}," from Oracle.",{"type":14,"tag":34,"props":443,"children":444},{},[445,447],{"type":19,"value":446},"Calculate ",{"type":14,"tag":22,"props":448,"children":449},{"className":7},[450],{"type":19,"value":451},"k = - nk - e*sk",{"type":14,"tag":34,"props":453,"children":454},{},[455,457],{"type":19,"value":456},"Signature: ",{"type":14,"tag":22,"props":458,"children":459},{"className":7},[460],{"type":19,"value":461},"[P, k]",{"type":14,"tag":34,"props":463,"children":464},{},[465,467],{"type":19,"value":466},"Verifier\n",{"type":14,"tag":30,"props":468,"children":469},{},[470,478,487],{"type":14,"tag":34,"props":471,"children":472},{},[473,474],{"type":19,"value":424},{"type":14,"tag":22,"props":475,"children":476},{"className":7},[477],{"type":19,"value":429},{"type":14,"tag":34,"props":479,"children":480},{},[481,482,486],{"type":19,"value":434},{"type":14,"tag":22,"props":483,"children":484},{"className":7},[485],{"type":19,"value":439},{"type":19,"value":441},{"type":14,"tag":34,"props":488,"children":489},{},[490,492],{"type":19,"value":491},"Verify: ",{"type":14,"tag":22,"props":493,"children":494},{"className":7},[495],{"type":19,"value":496},"k*G + e*Pk + P == 0",{"type":14,"tag":199,"props":498,"children":500},{"id":499},"binary-platform-independent-representation-of-the-ecc-primitives",[501],{"type":19,"value":502},"Binary platform-independent representation of the ECC primitives",{"type":14,"tag":15,"props":504,"children":505},{},[506],{"type":19,"value":507},"The following are the primitives:",{"type":14,"tag":30,"props":509,"children":510},{},[511,535],{"type":14,"tag":34,"props":512,"children":513},{},[514,516],{"type":19,"value":515},"ECC Scalar\n",{"type":14,"tag":30,"props":517,"children":518},{},[519,530],{"type":14,"tag":34,"props":520,"children":521},{},[522,524,528],{"type":19,"value":523},"256-bits wide integer, representing the number in a big-endian format (via ",{"type":14,"tag":22,"props":525,"children":526},{"className":7},[527],{"type":19,"value":195},{"type":19,"value":529},")",{"type":14,"tag":34,"props":531,"children":532},{},[533],{"type":19,"value":534},"Deserialization ensures the number is indeed a valid scalar, i.e. strictly less than modulo-prime, to prevent ambiguity",{"type":14,"tag":34,"props":536,"children":537},{},[538,540],{"type":19,"value":539},"ECC Point\n",{"type":14,"tag":30,"props":541,"children":542},{},[543,548,559,564],{"type":14,"tag":34,"props":544,"children":545},{},[546],{"type":19,"value":547},"Represented as an X-coordinate, and a Y-parity flag (1 bit).",{"type":14,"tag":34,"props":549,"children":550},{},[551,553,557],{"type":19,"value":552},"The X-coordinate is serialized via ",{"type":14,"tag":22,"props":554,"children":555},{"className":7},[556],{"type":19,"value":195},{"type":19,"value":558}," (similar to scalar).",{"type":14,"tag":34,"props":560,"children":561},{},[562],{"type":19,"value":563},"To recover the Y-coordinate one must solve a quadratic equation, which, naturally has 2 solutions. This is where Y-parity flag is used.",{"type":14,"tag":34,"props":565,"children":566},{},[567],{"type":19,"value":568},"When serialized individually the data is padded to a byte boundary (means the Y-parity bit takes the whole byte). However in some complex data types those flags are merged and stored separately (Ex: Bulletproofs).",{"title":7,"searchDepth":570,"depth":570,"links":571},2,[572,578,579],{"id":201,"depth":570,"text":204,"children":573},[574,576,577],{"id":254,"depth":575,"text":257},3,{"id":281,"depth":575,"text":284},{"id":314,"depth":575,"text":317},{"id":325,"depth":570,"text":328},{"id":499,"depth":570,"text":502},"markdown","content:docs:core-tech:Cryptographic-primitives.md","content","docs/core-tech/Cryptographic-primitives.md","md",1702260895165]