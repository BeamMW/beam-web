[{"data":1,"prerenderedAt":117},["Reactive",2],{"content-query-lYSF6NKA6A":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":112,"_id":113,"_source":114,"_file":115,"_extension":116},"/docs/core-tech/one-side-payments-(take-2)-deprecated","core-tech",false,"","-- DEPRECATED --","In MW transactions are built interactively, means sender and receiver must collaborate to build a transaction. Here we'll describe a scheme where the sender can pay the receiver without the latter being involved during the payment.",{"type":11,"children":12,"toc":109},"root",[13,21,25,30,50,62,68,93,98,104],{"type":14,"tag":15,"props":16,"children":18},"element","h1",{"id":17},"deprecated",[19],{"type":20,"value":8},"text",{"type":14,"tag":22,"props":23,"children":24},"hr",{},[],{"type":14,"tag":26,"props":27,"children":28},"p",{},[29],{"type":20,"value":9},{"type":14,"tag":26,"props":31,"children":32},{},[33,35,41,43,48],{"type":20,"value":34},"Previously we described such a scheme that allowed one-side payments, which demanded our extension to MW which we called ",{"type":14,"tag":36,"props":37,"children":38},"em",{},[39],{"type":20,"value":40},"kernel fusion",{"type":20,"value":42},". The idea was that the receiver prepares in advance its UTXO + kernel that compensates for its blinding factor. Then in order to pay the sender creates a transaction with this UTXO appended, and another kernel ",{"type":14,"tag":36,"props":44,"children":45},{},[46],{"type":20,"value":47},"fused",{"type":20,"value":49}," with that given by the receiver. The drawback of this scheme is that it was possible to transfer fixed values only (that corresponded to the prepared UTXOs).",{"type":14,"tag":26,"props":51,"children":52},{},[53,55,60],{"type":20,"value":54},"Here we describe a scheme without this drawback, i.e. where the sender can transfer any amount to the receiver.\nThe idea is to ",{"type":14,"tag":36,"props":56,"children":57},{},[58],{"type":20,"value":59},"fuse",{"type":20,"value":61}," UTXOs rather than kernel. The receiver should prepare the UTXO only partially, then the sender would finalize it to accomplish the payment.",{"type":14,"tag":15,"props":63,"children":65},{"id":64},"detailed-description",[66],{"type":20,"value":67},"Detailed description",{"type":14,"tag":26,"props":69,"children":70},{},[71,73,78,80,84,86,91],{"type":20,"value":72},"The UTXO is redefined, and may optionally contain an ",{"type":14,"tag":36,"props":74,"children":75},{},[76],{"type":20,"value":77},"extra excess",{"type":20,"value":79},", which is an arbitrary EC point with the Schnorr's signature that proves there's no value hidden (similar to kernel). So that when the UTXO signature (bulletproof) is created - it signs the visible UTXO Commitment minus the ",{"type":14,"tag":36,"props":81,"children":82},{},[83],{"type":20,"value":77},{"type":20,"value":85},", however this ",{"type":14,"tag":36,"props":87,"children":88},{},[89],{"type":20,"value":90},"excess",{"type":20,"value":92}," is accounted for in the signature, so that it's not possible to remove it (this is the fusion).",{"type":14,"tag":26,"props":94,"children":95},{},[96],{"type":20,"value":97},"The receiver picks an arbitrary excess, signs both this excess and the kernel that would compensate for it. In addition it picks the KDF (key deviation function) parameters.",{"type":14,"tag":15,"props":99,"children":101},{"id":100},"comparison-of-both-schemes",[102],{"type":20,"value":103},"Comparison of both schemes",{"type":14,"tag":26,"props":105,"children":106},{},[107],{"type":20,"value":108},"Kernel fusion\n*",{"title":7,"searchDepth":110,"depth":110,"links":111},2,[],"markdown","content:docs:core-tech:One-side-payments-(take-2)---DEPRECATED.md","content","docs/core-tech/One-side-payments-(take-2)---DEPRECATED.md","md",1702260904910]