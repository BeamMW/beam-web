[{"data":1,"prerenderedAt":441},["Reactive",2],{"content-query-30j2zxP292":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":436,"_id":437,"_source":438,"_file":439,"_extension":440},"/docs/core-tech/confidential-assets-(historical)","core-tech",false,"","Confidential Assets (historical)","Consult the MW CLA section for Confidential Assets implementation details",{"type":11,"children":12,"toc":425},"root",[13,32,45,54,58,78,85,116,127,158,164,178,204,209,216,228,239,245,262,267,272,278,290,309,326,333,338,350,355,360,365],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18,21,30],{"type":19,"value":20},"text","Consult the ",{"type":14,"tag":22,"props":23,"children":27},"a",{"href":24,"rel":25},"https://github.com/BeamMW/beam/wiki/MW-CLA",[26],"nofollow",[28],{"type":19,"value":29},"MW CLA",{"type":19,"value":31}," section for Confidential Assets implementation details",{"type":14,"tag":15,"props":33,"children":34},{},[35,36,43],{"type":19,"value":20},{"type":14,"tag":22,"props":37,"children":40},{"href":38,"rel":39},"https://github.com/BeamMW/beam/wiki/Confidential-assets-(BETA)",[26],[41],{"type":19,"value":42},"Confidential assets (BETA)\n",{"type":19,"value":44}," section for the Confidential Assets tutorial",{"type":14,"tag":15,"props":46,"children":47},{},[48],{"type":14,"tag":49,"props":50,"children":51},"strong",{},[52],{"type":19,"value":53},"THE TEXT BELOW IS KEPT FOR HISTORICAL REASONS",{"type":14,"tag":55,"props":56,"children":57},"hr",{},[],{"type":14,"tag":15,"props":59,"children":60},{},[61,63,69,71,76],{"type":19,"value":62},"MW can be extended to allows encoding multiple types of assets to be traded on the same blockchain. And it will only need a slight modifications to actually allow this.\nThere are two types of assets that can be implemented: ",{"type":14,"tag":64,"props":65,"children":66},"em",{},[67],{"type":19,"value":68},"predefined",{"type":19,"value":70}," and ",{"type":14,"tag":64,"props":72,"children":73},{},[74],{"type":19,"value":75},"custom",{"type":19,"value":77},". Each type has its advantages and limitations.",{"type":14,"tag":79,"props":80,"children":82},"h2",{"id":81},"basic-idea",[83],{"type":19,"value":84},"Basic idea",{"type":14,"tag":15,"props":86,"children":87},{},[88,90,96,97,102,104,108,110,114],{"type":19,"value":89},"The UTXO is an EC point, which is a linear combination of two nums (nothing-up-my-sleeve) generators: ",{"type":14,"tag":91,"props":92,"children":93},"code",{"className":7},[94],{"type":19,"value":95},"G",{"type":19,"value":70},{"type":14,"tag":91,"props":98,"children":99},{"className":7},[100],{"type":19,"value":101},"H",{"type":19,"value":103},", whereas ",{"type":14,"tag":91,"props":105,"children":106},{"className":7},[107],{"type":19,"value":95},{"type":19,"value":109}," is multiplied by the secret key (blinding factor), and the ",{"type":14,"tag":91,"props":111,"children":112},{"className":7},[113],{"type":19,"value":101},{"type":19,"value":115}," - by the value.",{"type":14,"tag":15,"props":117,"children":118},{},[119,121,125],{"type":19,"value":120},"To allow multiple types of assets it's sufficient to use different generators (one per asset type) instead of the single ",{"type":14,"tag":91,"props":122,"children":123},{"className":7},[124],{"type":19,"value":101},{"type":19,"value":126},". There may be different schemes to represent such UTXOs, but in any of them the following should be taken into consideration:",{"type":14,"tag":128,"props":129,"children":130},"ul",{},[131,148,153],{"type":14,"tag":132,"props":133,"children":134},"li",{},[135,137,146],{"type":19,"value":136},"Those ",{"type":14,"tag":138,"props":139,"children":140},"u",{},[141],{"type":14,"tag":49,"props":142,"children":143},{},[144],{"type":19,"value":145},"must",{"type":19,"value":147}," be nums-generators, and the verifier should be able to verify this.",{"type":14,"tag":132,"props":149,"children":150},{},[151],{"type":19,"value":152},"The verifier should be able to verify the rangeproof. Means - the bulletproof should be adjusted accordingly.",{"type":14,"tag":132,"props":154,"children":155},{},[156],{"type":19,"value":157},"There should be a brief scheme for the emission of the assets.",{"type":14,"tag":79,"props":159,"children":161},{"id":160},"predefined-asset-types",[162],{"type":19,"value":163},"Predefined asset types",{"type":14,"tag":15,"props":165,"children":166},{},[167,169,176],{"type":19,"value":168},"This idea belongs to Andrew Poelstra. Described ",{"type":14,"tag":22,"props":170,"children":173},{"href":171,"rel":172},"https://blockstream.com/2017/04/03/blockstream-releases-elements-confidential-assets.html",[26],[174],{"type":19,"value":175},"here",{"type":19,"value":177},".",{"type":14,"tag":15,"props":179,"children":180},{},[181,183,188,190,195,197,202],{"type":19,"value":182},"Each UTXO should carry a ",{"type":14,"tag":64,"props":184,"children":185},{},[186],{"type":19,"value":187},"tag",{"type":19,"value":189},", which is an EC point, which defines the asset type. The great advantage of this scheme is that all the tags are ",{"type":14,"tag":49,"props":191,"children":192},{},[193],{"type":19,"value":194},"blinded",{"type":19,"value":196},". Means - anyone can verify that this tag corresponds to one of the defined asset types, but not to which of them exactly. This is achieved by using Andrew Poelstra's ",{"type":14,"tag":138,"props":198,"children":199},{},[200],{"type":19,"value":201},"Asset Surjection Proof",{"type":19,"value":203},", which has a modest size compared to the bulletproof for a reasonably-small set of asset types.",{"type":14,"tag":15,"props":205,"children":206},{},[207],{"type":19,"value":208},"The set of the asset types, as well as their emission schedule, must be defined for the blockchain. Any change to this will require a fork.",{"type":14,"tag":210,"props":211,"children":213},"h3",{"id":212},"another-variant",[214],{"type":19,"value":215},"Another variant",{"type":14,"tag":15,"props":217,"children":218},{},[219,221,226],{"type":19,"value":220},"Another possible way to implement this is to encode all the asset types within a single UTXO. That is, each UTXO is presumably a linear combination of all the generators at once. In this design ",{"type":14,"tag":64,"props":222,"children":223},{},[224],{"type":19,"value":225},"tags",{"type":19,"value":227}," are not needed.",{"type":14,"tag":15,"props":229,"children":230},{},[231,233,237],{"type":19,"value":232},"The drawback here is the increased complexity and size of the bulletproofs, which seem to be dramatic. So that the idea with ",{"type":14,"tag":64,"props":234,"children":235},{},[236],{"type":19,"value":225},{"type":19,"value":238},", whereas an UTXO encodes only a single asset type - seems to be better.",{"type":14,"tag":79,"props":240,"children":242},{"id":241},"custom-asset-types",[243],{"type":19,"value":244},"Custom asset types",{"type":14,"tag":15,"props":246,"children":247},{},[248,250,254,256,260],{"type":19,"value":249},"In addition there is a possibility to allow ",{"type":14,"tag":64,"props":251,"children":252},{},[253],{"type":19,"value":75},{"type":19,"value":255}," assets, which any user can emit and trade. As in the previous scheme, such UTXOs should carry a ",{"type":14,"tag":64,"props":257,"children":258},{},[259],{"type":19,"value":187},{"type":19,"value":261},", which corresponds to the asset type. But this time those tags can't be blinded perfectly. All the user can do is present a set of tags, and prove that the used tag is one of them.",{"type":14,"tag":15,"props":263,"children":264},{},[265],{"type":19,"value":266},"So that custom tags should either be visible, or partially obfuscated. The encoded amount, naturally, is fully concealed.",{"type":14,"tag":15,"props":268,"children":269},{},[270],{"type":19,"value":271},"Now, since there are no predefined generators used for custom asset types, there should be a way for the verified to make sure each such a generator is actually a nums-generator. This is addressed by the following scheme.",{"type":14,"tag":210,"props":273,"children":275},{"id":274},"asset-control",[276],{"type":19,"value":277},"Asset control",{"type":14,"tag":15,"props":279,"children":280},{},[281,283,288],{"type":19,"value":282},"To create a custom asset type the user generates a public/private key pair. The public key serves as an ",{"type":14,"tag":64,"props":284,"children":285},{},[286],{"type":19,"value":287},"Asset ID",{"type":19,"value":289},", and the generator used for this asset type is derived from the ID via hashing, so that it may be considered as a sound nums-generator.",{"type":14,"tag":15,"props":291,"children":292},{},[293,295,300,302,307],{"type":19,"value":294},"The user controls the emission and collection of the asset. The user can ",{"type":14,"tag":64,"props":296,"children":297},{},[298],{"type":19,"value":299},"convert",{"type":19,"value":301}," some amount of the master asset type (i.e. BEAM) into his/her type by a special instruction, which is signed by the corresponding ",{"type":14,"tag":49,"props":303,"children":304},{},[305],{"type":19,"value":306},"private",{"type":19,"value":308}," key. For convenience it can be embedded into the transaction kernel.",{"type":14,"tag":15,"props":310,"children":311},{},[312,317,319,324],{"type":14,"tag":49,"props":313,"children":314},{},[315],{"type":19,"value":316},"Note:",{"type":19,"value":318}," The conversion is only needed to prevent bloat. The user effectively ",{"type":14,"tag":64,"props":320,"children":321},{},[322],{"type":19,"value":323},"buys",{"type":19,"value":325}," his/her coins, but they are refundable. Only the user is be able to trade the unspent assets back to collect the refund. If the bloat is not an issue - it's possible to allow the emission for free.",{"type":14,"tag":327,"props":328,"children":330},"h1",{"id":329},"final-design",[331],{"type":19,"value":332},"Final design",{"type":14,"tag":15,"props":334,"children":335},{},[336],{"type":19,"value":337},"The BEAM should support both the predefined and custom assets.",{"type":14,"tag":15,"props":339,"children":340},{},[341,343,348],{"type":19,"value":342},"There should be several predefined asset types, which are automatically emitted by every new block. Their difference is the ",{"type":14,"tag":138,"props":344,"children":345},{},[346],{"type":19,"value":347},"emission schedule",{"type":19,"value":349},". There should be one with constant emission, one with capped emission. Possibly another one with declining but non-converging (e.i. not capped) emission.",{"type":14,"tag":15,"props":351,"children":352},{},[353],{"type":19,"value":354},"This is equivalent to having several coin types suitable for instant payment, store of value, and etc.",{"type":14,"tag":15,"props":356,"children":357},{},[358],{"type":19,"value":359},"Custom asset tags are not emitted automatically, they're explicitly traded for one of the predefined types.",{"type":14,"tag":15,"props":361,"children":362},{},[363],{"type":19,"value":364},"The modifications needed to support all this is considerable, but straightforward. The following should be modified:",{"type":14,"tag":128,"props":366,"children":367},{},[368,373,378,402],{"type":14,"tag":132,"props":369,"children":370},{},[371],{"type":19,"value":372},"Tags should be added to UTXOs",{"type":14,"tag":132,"props":374,"children":375},{},[376],{"type":19,"value":377},"For predefined types: Assert Surjection proofs should be added to UTXOs",{"type":14,"tag":132,"props":379,"children":380},{},[381,383],{"type":19,"value":382},"For custom types:\n",{"type":14,"tag":128,"props":384,"children":385},{},[386,391],{"type":14,"tag":132,"props":387,"children":388},{},[389],{"type":19,"value":390},"Assert Surjection proofs may optionally be used, in addition to a list of the possible asset types.",{"type":14,"tag":132,"props":392,"children":393},{},[394,396,400],{"type":19,"value":395},"Another possibility - they should not be blinded, and contain the ",{"type":14,"tag":64,"props":397,"children":398},{},[399],{"type":19,"value":287},{"type":19,"value":401}," explicitly.",{"type":14,"tag":132,"props":403,"children":404},{},[405,407],{"type":19,"value":406},"Transaction/Block verification:\n",{"type":14,"tag":128,"props":408,"children":409},{},[410,415,420],{"type":14,"tag":132,"props":411,"children":412},{},[413],{"type":19,"value":414},"Bulletproof code should be modified to support custom generators (probably slight performance degradation)",{"type":14,"tag":132,"props":416,"children":417},{},[418],{"type":19,"value":419},"Custom type conversion instruction should be supported, but this is straightforward (only alters the summation to zero criteria)",{"type":14,"tag":132,"props":421,"children":422},{},[423],{"type":19,"value":424},"Block emission should be handled w.r.t. predefined types and their emission schedule.",{"title":7,"searchDepth":426,"depth":426,"links":427},2,[428,429,433],{"id":81,"depth":426,"text":84},{"id":160,"depth":426,"text":163,"children":430},[431],{"id":212,"depth":432,"text":215},3,{"id":241,"depth":426,"text":244,"children":434},[435],{"id":274,"depth":432,"text":277},"markdown","content:docs:core-tech:Confidential-assets-(historical).md","content","docs/core-tech/Confidential-assets-(historical).md","md",1702260894634]