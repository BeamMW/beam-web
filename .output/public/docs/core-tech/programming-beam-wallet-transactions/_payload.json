[{"data":1,"prerenderedAt":265},["Reactive",2],{"content-query-1QpHsSu7n0":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":260,"_id":261,"_source":262,"_file":263,"_extension":264},"/docs/core-tech/programming-beam-wallet-transactions","core-tech",false,"","Programming Beam Wallet Transactions","This section describes the structure of Beam transactions. Transactions are created and managed locally in the Beam wallet.",{"type":11,"children":12,"toc":245},"root",[13,20,27,32,46,66,72,86,105,110,123,139,144,153,159,172,188,193,199,204,213,228,240],{"type":14,"tag":15,"props":16,"children":17},"element","p",{},[18],{"type":19,"value":9},"text",{"type":14,"tag":21,"props":22,"children":24},"h2",{"id":23},"transaction-parameters",[25],{"type":19,"value":26},"Transaction parameters",{"type":14,"tag":15,"props":28,"children":29},{},[30],{"type":19,"value":31},"Transactions are defined and stored in the database as a set of transaction parameters, thus allowing a lot of flexibility.",{"type":14,"tag":15,"props":33,"children":34},{},[35,37],{"type":19,"value":36},"The complete list of transaction parameters is defined ",{"type":14,"tag":38,"props":39,"children":43},"a",{"href":40,"rel":41},"https://github.com/BeamMW/beam/blob/edf0bb8a16626f6e1160bc09a7af4e0a40adb813/wallet/common.h#L226",[42],"nofollow",[44],{"type":19,"value":45},"here",{"type":14,"tag":15,"props":47,"children":48},{},[49,51,57,59,64],{"type":19,"value":50},"Transaction parameters are divided into two groups. ",{"type":14,"tag":52,"props":53,"children":54},"strong",{},[55],{"type":19,"value":56},"Public",{"type":19,"value":58}," parameters can be set during the interaction between wallets. Once public parameter is set, it can not be changed. ",{"type":14,"tag":52,"props":60,"children":61},{},[62],{"type":19,"value":63},"Private",{"type":19,"value":65}," parameters, can be set and reset at any time within the wallet and are not sent outside the wallet. The reason for this separation is to maintain a clear distinction between the parameters that are revealed to or received from the other wallet and can thus irreversibly affect the state of negotiation between the wallets creating the transaction.",{"type":14,"tag":21,"props":67,"children":69},{"id":68},"transaction-id",[70],{"type":19,"value":71},"Transaction id",{"type":14,"tag":15,"props":73,"children":74},{},[75,77,84],{"type":19,"value":76},"TxID, ",{"type":14,"tag":38,"props":78,"children":81},{"href":79,"rel":80},"https://github.com/BeamMW/beam/blob/edf0bb8a16626f6e1160bc09a7af4e0a40adb813/wallet/common.h#L37",[42],[82],{"type":19,"value":83},"defined here",{"type":19,"value":85}," is the unique id of the transaction",{"type":14,"tag":21,"props":87,"children":89},{"id":88},"itransaction-interface-definition",[90,92],{"type":19,"value":91},"ITransaction interface ",{"type":14,"tag":93,"props":94,"children":95},"span",{},[96,98],{"type":19,"value":97}," ",{"type":14,"tag":38,"props":99,"children":102},{"href":100,"rel":101},"https://github.com/BeamMW/beam/blob/edf0bb8a16626f6e1160bc09a7af4e0a40adb813/wallet/base_transaction.h#L28",[42],[103],{"type":19,"value":104},"definition",{"type":14,"tag":15,"props":106,"children":107},{},[108],{"type":19,"value":109},"Defines basic set of operations for each transaction, Update, Cancel and Rollback",{"type":14,"tag":111,"props":112,"children":117},"pre",{"className":113,"code":115,"language":116,"meta":7},[114],"language-c++","struct ITransaction\n    {\n        using Ptr = std::shared_ptr\u003CITransaction>;\n        virtual TxType GetType() const = 0;\n        virtual void Update() = 0;\n        virtual void Cancel() = 0;\n        virtual bool Rollback(Height height) = 0;\n    };\n\n","c++",[118],{"type":14,"tag":119,"props":120,"children":121},"code",{"__ignoreMap":7},[122],{"type":19,"value":115},{"type":14,"tag":21,"props":124,"children":126},{"id":125},"basetransaction-definition",[127,129],{"type":19,"value":128},"BaseTransaction ",{"type":14,"tag":93,"props":130,"children":131},{},[132,133],{"type":19,"value":97},{"type":14,"tag":38,"props":134,"children":137},{"href":135,"rel":136},"https://github.com/BeamMW/beam/blob/edf0bb8a16626f6e1160bc09a7af4e0a40adb813/wallet/base_transaction.h#L55",[42],[138],{"type":19,"value":104},{"type":14,"tag":15,"props":140,"children":141},{},[142],{"type":19,"value":143},"Implements the ITransaction interface and provides the state machine for creation of transactions. Constructor for BaseTransaction receives three parameters:",{"type":14,"tag":111,"props":145,"children":148},{"className":146,"code":147,"language":116,"meta":7},[114],"\nBaseTransaction(INegotiatorGateway& gateway, beam::IWalletDB::Ptr walletDB, const TxID& txID);\n\n",[149],{"type":14,"tag":119,"props":150,"children":151},{"__ignoreMap":7},[152],{"type":19,"value":147},{"type":14,"tag":21,"props":154,"children":156},{"id":155},"basetxbuilder",[157],{"type":19,"value":158},"BaseTxBuilder",{"type":14,"tag":15,"props":160,"children":161},{},[162,164,170],{"type":19,"value":163},"This class encapsulates all the methods necessary for transaction creation following the protocol described ",{"type":14,"tag":38,"props":165,"children":168},{"href":166,"rel":167},"https://github.com/BeamMW/beam/wiki/Transaction-creation-protocol",[42],[169],{"type":19,"value":45},{"type":19,"value":171},".",{"type":14,"tag":21,"props":173,"children":175},{"id":174},"inegotiatorgateway-definition",[176,178],{"type":19,"value":177},"INegotiatorGateway ",{"type":14,"tag":93,"props":179,"children":180},{},[181,182],{"type":19,"value":97},{"type":14,"tag":38,"props":183,"children":186},{"href":184,"rel":185},"https://github.com/BeamMW/beam/blob/edf0bb8a16626f6e1160bc09a7af4e0a40adb813/wallet/common.h#L409",[42],[187],{"type":19,"value":104},{"type":14,"tag":15,"props":189,"children":190},{},[191],{"type":19,"value":192},"Negotiator Gateway provides an abstraction of the messaging between the node or another wallet during the transaction creation. The INegotiatorGateway interface is implemented by the Wallet class.",{"type":14,"tag":21,"props":194,"children":196},{"id":195},"basetransactionupdate-method",[197],{"type":19,"value":198},"BaseTransaction::Update method",{"type":14,"tag":15,"props":200,"children":201},{},[202],{"type":19,"value":203},"The Update method describes generic logic of asynchronous transaction update. The update logic is implemented in the UpdateImpl method described below.",{"type":14,"tag":111,"props":205,"children":208},{"className":206,"code":207,"language":116,"meta":7},[114],"\nvoid BaseTransaction::Update()\n    {\n        AsyncContextHolder async(m_Gateway);\n        try\n        {\n            if (CheckExternalFailures())\n            {\n                return;\n            }\n\n            UpdateImpl();\n\n            CheckExpired();\n        }\n        catch (const TransactionFailedException& ex)\n        {\n            LOG_ERROR() \u003C\u003C GetTxID() \u003C\u003C \" exception msg: \" \u003C\u003C ex.what();\n            OnFailed(ex.GetReason(), ex.ShouldNofify());\n        }\n        catch (const exception& ex)\n        {\n            LOG_ERROR() \u003C\u003C GetTxID() \u003C\u003C \" exception msg: \" \u003C\u003C ex.what();\n            OnFailed(TxFailureReason::Unknown);\n        }\n    }\n\n",[209],{"type":14,"tag":119,"props":210,"children":211},{"__ignoreMap":7},[212],{"type":19,"value":207},{"type":14,"tag":21,"props":214,"children":216},{"id":215},"simpletransaction-wallet_transactionh",[217,219,226],{"type":19,"value":218},"SimpleTransaction ( ",{"type":14,"tag":38,"props":220,"children":223},{"href":221,"rel":222},"https://github.com/BeamMW/beam/blob/edf0bb8a16626f6e1160bc09a7af4e0a40adb813/wallet/wallet_transaction.h#L1",[42],[224],{"type":19,"value":225},"wallet_transaction.h",{"type":19,"value":227}," )",{"type":14,"tag":15,"props":229,"children":230},{},[231,233,238],{"type":19,"value":232},"SimpleTransaction extends BaseTransaction and provides an implementation of the basic confidential transaction between two wallets. The key part of the implementation is the ",{"type":14,"tag":119,"props":234,"children":235},{"className":7},[236],{"type":19,"value":237},"void SimpleTransaction::UpdateImpl()",{"type":19,"value":239}," method that provides the state machine for the transaction creation logic.",{"type":14,"tag":15,"props":241,"children":242},{},[243],{"type":19,"value":244},"//TODO: Add detailed explanation for the transaction creation logic",{"title":7,"searchDepth":246,"depth":246,"links":247},2,[248,249,250,252,254,255,257,258],{"id":23,"depth":246,"text":26},{"id":68,"depth":246,"text":71},{"id":88,"depth":246,"text":251},"ITransaction interface  definition",{"id":125,"depth":246,"text":253},"BaseTransaction  definition",{"id":155,"depth":246,"text":158},{"id":174,"depth":246,"text":256},"INegotiatorGateway  definition",{"id":195,"depth":246,"text":198},{"id":215,"depth":246,"text":259},"SimpleTransaction ( wallet_transaction.h )","markdown","content:docs:core-tech:Programming-Beam-Wallet-Transactions.md","content","docs/core-tech/Programming-Beam-Wallet-Transactions.md","md",1702260905905]