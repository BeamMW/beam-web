[{"data":1,"prerenderedAt":443},["Reactive",2],{"content-query-0QkcYO6sud":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"body":10,"_type":438,"_id":439,"_source":440,"_file":441,"_extension":442},"/docs/core-tech/node-initial-synchronization-(deprecated)","core-tech",false,"","-- DEPRECATED --","BEAM Node initially operates in Sync mode, then eventually it switches to the Standard mode.",{"type":11,"children":12,"toc":430},"root",[13,21,42,47,93,111,162,169,180,198,203,252,258,263,287,311,316,327,332,337,353,359,370,419],{"type":14,"tag":15,"props":16,"children":18},"element","h1",{"id":17},"deprecated",[19],{"type":20,"value":8},"text",{"type":14,"tag":22,"props":23,"children":24},"p",{},[25,27,33,35,40],{"type":20,"value":26},"BEAM Node initially operates in ",{"type":14,"tag":28,"props":29,"children":30},"strong",{},[31],{"type":20,"value":32},"Sync",{"type":20,"value":34}," mode, then eventually it switches to the ",{"type":14,"tag":28,"props":36,"children":37},{},[38],{"type":20,"value":39},"Standard",{"type":20,"value":41}," mode.",{"type":14,"tag":22,"props":43,"children":44},{},[45],{"type":20,"value":46},"Initial state selection is performed according to the following logic:",{"type":14,"tag":48,"props":49,"children":50},"ul",{},[51,63,82],{"type":14,"tag":52,"props":53,"children":54},"li",{},[55,57,61],{"type":20,"value":56},"If the current blockchain tip is non-empty, i.e. contains at least the genesis block ",{"type":14,"tag":28,"props":58,"children":59},{},[60],{"type":20,"value":39},{"type":20,"value":62}," mode is selected.",{"type":14,"tag":52,"props":64,"children":65},{},[66,68,74,76,80],{"type":20,"value":67},"If there is a ",{"type":14,"tag":69,"props":70,"children":71},"em",{},[72],{"type":20,"value":73},"Treasury",{"type":20,"value":75}," block(s) defined - the Node is supposed to create the genesis block. It switches to the ",{"type":14,"tag":28,"props":77,"children":78},{},[79],{"type":20,"value":39},{"type":20,"value":81}," mode, mines the genesis block(s), and eventually broadcasts it to the network.",{"type":14,"tag":52,"props":83,"children":84},{},[85,87,91],{"type":20,"value":86},"Otherwise ",{"type":14,"tag":28,"props":88,"children":89},{},[90],{"type":20,"value":32},{"type":20,"value":92}," mode is activated.",{"type":14,"tag":22,"props":94,"children":95},{},[96,98,102,104,109],{"type":20,"value":97},"The goal of the ",{"type":14,"tag":28,"props":99,"children":100},{},[101],{"type":20,"value":32},{"type":20,"value":103}," mode is to allow the fast-Sync via ",{"type":14,"tag":69,"props":105,"children":106},{},[107],{"type":20,"value":108},"Macroblock",{"type":20,"value":110}," whenever possible. It consists of three phases.",{"type":14,"tag":112,"props":113,"children":114},"ol",{},[115,131,147],{"type":14,"tag":52,"props":116,"children":117},{},[118,123,125,129],{"type":14,"tag":69,"props":119,"children":120},{},[121],{"type":20,"value":122},"Detection phase",{"type":20,"value":124},". Node analyzes its peers, and selects the most suitable ",{"type":14,"tag":69,"props":126,"children":127},{},[128],{"type":20,"value":108},{"type":20,"value":130}," to download.",{"type":14,"tag":52,"props":132,"children":133},{},[134,139,141,145],{"type":14,"tag":69,"props":135,"children":136},{},[137],{"type":20,"value":138},"Download phase",{"type":20,"value":140},". Node downloads the ",{"type":14,"tag":69,"props":142,"children":143},{},[144],{"type":20,"value":108},{"type":20,"value":146}," (by portions), from one or several peers.",{"type":14,"tag":52,"props":148,"children":149},{},[150,155,157,161],{"type":14,"tag":69,"props":151,"children":152},{},[153],{"type":20,"value":154},"Import phase",{"type":20,"value":156},". Once fully downloaded - the Node uses it to import, and then switches to the ",{"type":14,"tag":28,"props":158,"children":159},{},[160],{"type":20,"value":39},{"type":20,"value":41},{"type":14,"tag":163,"props":164,"children":166},"h3",{"id":165},"synchronization-via-macroblock",[167],{"type":20,"value":168},"Synchronization via Macroblock",{"type":14,"tag":22,"props":170,"children":171},{},[172,174,178],{"type":20,"value":173},"The ",{"type":14,"tag":69,"props":175,"children":176},{},[177],{"type":20,"value":108},{"type":20,"value":179}," is a \"compressed\" blockchain history, which includes the following:",{"type":14,"tag":112,"props":181,"children":182},{},[183,188,193],{"type":14,"tag":52,"props":184,"children":185},{},[186],{"type":20,"value":187},"All the block headers, with PoW.",{"type":14,"tag":52,"props":189,"children":190},{},[191],{"type":20,"value":192},"All the transaction kernels.",{"type":14,"tag":52,"props":194,"children":195},{},[196],{"type":20,"value":197},"The unspent UTXO set.",{"type":14,"tag":22,"props":199,"children":200},{},[201],{"type":20,"value":202},"In contrast to the original blocks the macroblock doesn't contain any info about spent UTXOs. Once downloaded, the Node verifies the following:",{"type":14,"tag":112,"props":204,"children":205},{},[206,211,229],{"type":14,"tag":52,"props":207,"children":208},{},[209],{"type":20,"value":210},"All the headers are valid (sane, have valid PoW, form a valid blockchain)",{"type":14,"tag":52,"props":212,"children":213},{},[214,216],{"type":20,"value":215},"All the original kernels are included in the macroblock\n",{"type":14,"tag":48,"props":217,"children":218},{},[219,224],{"type":14,"tag":52,"props":220,"children":221},{},[222],{"type":20,"value":223},"This is done by verifying groups of kernels corresponding to a specific block w.r.t. kernel commitment in the appropriate header.",{"type":14,"tag":52,"props":225,"children":226},{},[227],{"type":20,"value":228},"This proves that all the original transactions are included.",{"type":14,"tag":52,"props":230,"children":231},{},[232,234],{"type":20,"value":233},"The resulting state of the system is valid:\n",{"type":14,"tag":48,"props":235,"children":236},{},[237,242,247],{"type":14,"tag":52,"props":238,"children":239},{},[240],{"type":20,"value":241},"Unspent UTXOs with all the kernels form a valid transformation from the genesis to the asserted height.",{"type":14,"tag":52,"props":243,"children":244},{},[245],{"type":20,"value":246},"The overall value equals what it should be according to the emission schedule.",{"type":14,"tag":52,"props":248,"children":249},{},[250],{"type":20,"value":251},"Recent coinbase UTXOs are time-locked, according to the system rules.",{"type":14,"tag":253,"props":254,"children":256},"h2",{"id":255},"detection-phase",[257],{"type":20,"value":122},{"type":14,"tag":22,"props":259,"children":260},{},[261],{"type":20,"value":262},"For each peer with non-empty tip the Node requests the following:",{"type":14,"tag":48,"props":264,"children":265},{},[266,276],{"type":14,"tag":52,"props":267,"children":268},{},[269,274],{"type":14,"tag":69,"props":270,"children":271},{},[272],{"type":20,"value":273},"Chainwork proof",{"type":20,"value":275}," (to ensure the credibility of the reported tip)",{"type":14,"tag":52,"props":277,"children":278},{},[279,281,285],{"type":20,"value":280},"Information about the most recently generated ",{"type":14,"tag":69,"props":282,"children":283},{},[284],{"type":20,"value":108},{"type":20,"value":286}," (its State ID).",{"type":14,"tag":22,"props":288,"children":289},{},[290,292,297,299,303,305,309],{"type":20,"value":291},"This continues until either enough such peers are examined, or the timeout expires (since the first suitable peer was found). The macroblock of the peer with the highest ",{"type":14,"tag":69,"props":293,"children":294},{},[295],{"type":20,"value":296},"Chainwork",{"type":20,"value":298}," is selected.\nIf there is no macroblock to download (which is typically the case until blockchain height is low) - the Node switches to the ",{"type":14,"tag":28,"props":300,"children":301},{},[302],{"type":20,"value":39},{"type":20,"value":304}," mode, otherwise the ",{"type":14,"tag":69,"props":306,"children":307},{},[308],{"type":20,"value":138},{"type":20,"value":310}," is activated.",{"type":14,"tag":253,"props":312,"children":314},{"id":313},"download-phase",[315],{"type":20,"value":138},{"type":14,"tag":22,"props":317,"children":318},{},[319,321,325],{"type":20,"value":320},"During this phase the ",{"type":14,"tag":69,"props":322,"children":323},{},[324],{"type":20,"value":108},{"type":20,"value":326}," is downloaded by portions. Each time it gets a portion - the next portion is requested from the same peer. In case the peer goes down or has no macroblock for upload - another peer is selected.",{"type":14,"tag":22,"props":328,"children":329},{},[330],{"type":20,"value":331},"In case of shutdown/restart - the Node will continue the download from where it stopped.",{"type":14,"tag":253,"props":333,"children":335},{"id":334},"import-phase",[336],{"type":20,"value":154},{"type":14,"tag":22,"props":338,"children":339},{},[340,342,346,348,352],{"type":20,"value":341},"The Node performs the import from the downloaded ",{"type":14,"tag":69,"props":343,"children":344},{},[345],{"type":20,"value":108},{"type":20,"value":347},", and then switches to the ",{"type":14,"tag":28,"props":349,"children":350},{},[351],{"type":20,"value":39},{"type":20,"value":41},{"type":14,"tag":15,"props":354,"children":356},{"id":355},"notes",[357],{"type":20,"value":358},"Notes",{"type":14,"tag":22,"props":360,"children":361},{},[362,364,368],{"type":20,"value":363},"In case something goes wrong during the ",{"type":14,"tag":28,"props":365,"children":366},{},[367],{"type":20,"value":32},{"type":20,"value":369}," mode - there is no automatic retry/restart. User intervention is required. Whereas in typical scenarios problems are unlikely, possible abnormal cases are:",{"type":14,"tag":48,"props":371,"children":372},{},[373,390,414],{"type":14,"tag":52,"props":374,"children":375},{},[376,378,382,384,388],{"type":20,"value":377},"No Macroblock detected. Can happen if the peer with the highest (proven) chainwork reports than it has no ",{"type":14,"tag":69,"props":379,"children":380},{},[381],{"type":20,"value":108},{"type":20,"value":383},". In this case Node goes straight to the ",{"type":14,"tag":28,"props":385,"children":386},{},[387],{"type":20,"value":39},{"type":20,"value":389}," mode to sync, which is slower, and may not succeed in case old original blocks are already deleted in all peers.",{"type":14,"tag":52,"props":391,"children":392},{},[393,395,399,401,406,408,412],{"type":20,"value":394},"Macroblock download stuck: Node attempts to download a ",{"type":14,"tag":69,"props":396,"children":397},{},[398],{"type":20,"value":108},{"type":20,"value":400}," which no more exists in any of its peers. Can happen if the download takes insanely long, and during this time all the peers generated many newer ",{"type":14,"tag":69,"props":402,"children":403},{},[404],{"type":20,"value":405},"Macroblocks",{"type":20,"value":407},". Typically each node keeps several most recently-generated ",{"type":14,"tag":69,"props":409,"children":410},{},[411],{"type":20,"value":405},{"type":20,"value":413}," (7 by default), and eventually deletes older ones.",{"type":14,"tag":52,"props":415,"children":416},{},[417],{"type":20,"value":418},"Macroblock import error (data corruped, inconsistent state). Most probably the result of DoS attack,  or less probably - some bug or the storage corruption.",{"type":14,"tag":22,"props":420,"children":421},{},[422,424,428],{"type":20,"value":423},"In case of an error it's possible to reset the Node state, and retry the synchronization. Or, alternatively, the most recent ",{"type":14,"tag":69,"props":425,"children":426},{},[427],{"type":20,"value":108},{"type":20,"value":429}," may be downloaded manually, and given to the Node for explicit initialization",{"title":7,"searchDepth":431,"depth":431,"links":432},2,[433,435,436,437],{"id":165,"depth":434,"text":168},3,{"id":255,"depth":431,"text":122},{"id":313,"depth":431,"text":138},{"id":334,"depth":431,"text":154},"markdown","content:docs:core-tech:Node-initial-synchronization-(DEPRECATED).md","content","docs/core-tech/Node-initial-synchronization-(DEPRECATED).md","md",1702260904717]