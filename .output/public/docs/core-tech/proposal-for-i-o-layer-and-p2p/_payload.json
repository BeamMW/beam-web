[{"data":1,"prerenderedAt":291},["Reactive",2],{"content-query-UOoIxdv1Nu":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":7,"body":9,"_type":286,"_id":287,"_source":288,"_file":289,"_extension":290},"/docs/core-tech/proposal-for-i-o-layer-and-p2p","core-tech",false,"","Proposal For I O Layer And P2P",{"type":10,"children":11,"toc":277},"root",[12,21,28,34,106,112,208,214,235],{"type":13,"tag":14,"props":15,"children":17},"element","h2",{"id":16},"нынешнее-видение-по-организации-сетевого-в-тч-p2p-модуля",[18],{"type":19,"value":20},"text","Нынешнее видение по организации сетевого (в т.ч. p2p) модуля",{"type":13,"tag":22,"props":23,"children":25},"h3",{"id":24},"несколько-уровней-внутри-самого-модуля",[26],{"type":19,"value":27},"Несколько уровней внутри самого модуля",{"type":13,"tag":29,"props":30,"children":31},"p",{},[32],{"type":19,"value":33},"Для тестирования самое то. Код понятный, кусок логики не придется искать в других директориях. Снизу наверх:",{"type":13,"tag":35,"props":36,"children":37},"ol",{},[38,44,83],{"type":13,"tag":39,"props":40,"children":41},"li",{},[42],{"type":19,"value":43},"IO уровень: оперирует соединениями, сырыми байтами, реконнектами, таймаутами и асинхронностью (там поллинг самого общего плана)",{"type":13,"tag":39,"props":45,"children":46},{},[47,49],{"type":19,"value":48},"Peer уровень:",{"type":13,"tag":50,"props":51,"children":52},"ul",{},[53,58,63,68,73,78],{"type":13,"tag":39,"props":54,"children":55},{},[56],{"type":19,"value":57},"протокол и сериализация,",{"type":13,"tag":39,"props":59,"children":60},{},[61],{"type":19,"value":62},"коллекция peers,",{"type":13,"tag":39,"props":64,"children":65},{},[66],{"type":19,"value":67},"броадкасты,",{"type":13,"tag":39,"props":69,"children":70},{},[71],{"type":19,"value":72},"персистентное хранилище, связанное с peers (пусть отдельно будет от хранилища блокчейна),",{"type":13,"tag":39,"props":74,"children":75},{},[76],{"type":19,"value":77},"ban/unban",{"type":13,"tag":39,"props":79,"children":80},{},[81],{"type":19,"value":82},"Dandelion (да, он здесь, а не в уровне 3)",{"type":13,"tag":39,"props":84,"children":85},{},[86,88],{"type":19,"value":87},"Integration layer:",{"type":13,"tag":50,"props":89,"children":90},{},[91,96,101],{"type":13,"tag":39,"props":92,"children":93},{},[94],{"type":19,"value":95},"фильтр и cache (это множество хешей, которые позволят не отправлять TX или блок в узел, у которого он есть, а также не отсылать в другие модули то, что им уже известно)",{"type":13,"tag":39,"props":97,"children":98},{},[99],{"type":19,"value":100},"бридж с основной системой, т.е. формирование и трансляция запросов/ответов между ней (API модулей) и уровнем 2",{"type":13,"tag":39,"props":102,"children":103},{},[104],{"type":19,"value":105},"межпоточное взаимодействие",{"type":13,"tag":22,"props":107,"children":109},{"id":108},"основные-моменты-подробнее",[110],{"type":19,"value":111},"Основные моменты подробнее",{"type":13,"tag":35,"props":113,"children":114},{},[115,149,177,195],{"type":13,"tag":39,"props":116,"children":117},{},[118,120],{"type":19,"value":119},"Один поток на все вышесказанное (сетевая логика, а также уровни 2 и 3)",{"type":13,"tag":50,"props":121,"children":122},{},[123,128,133,138],{"type":13,"tag":39,"props":124,"children":125},{},[126],{"type":19,"value":127},"Тут логика, которая не требует вычислений, можно иметь очень много активных соединений, пределом может стать только сеть или память, но не cpu",{"type":13,"tag":39,"props":129,"children":130},{},[131],{"type":19,"value":132},"Исключение: может понадобиться отдельный поток, который зипует громоздкие ответы. Пусть они асинхронно формируются по мере надобности в них",{"type":13,"tag":39,"props":134,"children":135},{},[136],{"type":19,"value":137},"Взаимодействие с другими потоками или через очереди (если это запросы/ответы) или напрямую (явно сделать, чтоб было понятно, что это константный кусок памяти). Мьютексы ставить на небольшие кусочки обновляемых данных (ну например { total_difficulty, total_height }), которые можно быстро прочитать",{"type":13,"tag":39,"props":139,"children":140},{},[141,143],{"type":19,"value":142},"В очередях только что-то легко копируемое или immutable data, напр. { Type type; shared_ptr",{"type":13,"tag":144,"props":145,"children":146},"const",{"tx":7},[147],{"type":19,"value":148}," и т.п.}",{"type":13,"tag":39,"props":150,"children":151},{},[152,154],{"type":19,"value":153},"Сетевое хозяйство и протокол",{"type":13,"tag":50,"props":155,"children":156},{},[157,162,167,172],{"type":13,"tag":39,"props":158,"children":159},{},[160],{"type":19,"value":161},"Ограничиваемся TCP и IPv4. Потом успеем добавить если что понадобится, а так пусть меньше сначала кода будет",{"type":13,"tag":39,"props":163,"children":164},{},[165],{"type":19,"value":166},"В качестве библиотеки по сетевым вещам и асинхронности очень желаю libuv. Обоснование ниже.",{"type":13,"tag":39,"props":168,"children":169},{},[170],{"type":19,"value":171},"Можно взять за основу протокол из grin, что-то убрать/добавить проблем не составит",{"type":13,"tag":39,"props":173,"children":174},{},[175],{"type":19,"value":176},"Dandelion: надо определиться с одной из 2х схем, прописанных в документации по grin",{"type":13,"tag":39,"props":178,"children":179},{},[180,182],{"type":19,"value":181},"Peers",{"type":13,"tag":50,"props":183,"children":184},{},[185,190],{"type":13,"tag":39,"props":186,"children":187},{},[188],{"type":19,"value":189},"Логику взять у grin, для начала",{"type":13,"tag":39,"props":191,"children":192},{},[193],{"type":19,"value":194},"Для хранилища (не блокчейн, только для peers, оно отдельное должно быть) взять sqlite как наиболее проверенную временем штуку. Она гибкая (индексы и т.д.). Кстати, in-memory sqlite тоже хорошо себя зарекомендовало как штука для работы с табличными данными и сложными индексами. Когда/если будут видны ограничения по performance или станет ясно, что не нужно индексирование, можно быдет подобрать key-value storage побыстрее",{"type":13,"tag":39,"props":196,"children":197},{},[198,200],{"type":19,"value":199},"Кэши и фильтры",{"type":13,"tag":50,"props":201,"children":202},{},[203],{"type":13,"tag":39,"props":204,"children":205},{},[206],{"type":19,"value":207},"То же, что и у grin для начала. Можно будет какой-нибудь bloom filter попробовать, чтоб избежать ограничений, которые мы в этой части видим у grin",{"type":13,"tag":22,"props":209,"children":211},{"id":210},"доводы-в-пользу-libuv",[212],{"type":19,"value":213},"Доводы в пользу libuv",{"type":13,"tag":29,"props":215,"children":216},{},[217,219,227,229],{"type":19,"value":218},"Оно здесь: ",{"type":13,"tag":220,"props":221,"children":225},"a",{"href":222,"rel":223},"http://docs.libuv.org/en/v1.x/",[224],"nofollow",[226],{"type":19,"value":222},{"type":19,"value":228},", ",{"type":13,"tag":220,"props":230,"children":233},{"href":231,"rel":232},"https://github.com/libuv/libuv",[224],[234],{"type":19,"value":231},{"type":13,"tag":50,"props":236,"children":237},{},[238,252,257,262,267,272],{"type":13,"tag":39,"props":239,"children":240},{},[241,243,250],{"type":19,"value":242},"Качественная и компактная вещь. На ней весь node.js и его асинхронность и ",{"type":13,"tag":220,"props":244,"children":247},{"href":245,"rel":246},"https://github.com/libuv/libuv/wiki/Projects-that-use-libuv",[224],[248],{"type":19,"value":249},"много еще чего",{"type":19,"value":251},".",{"type":13,"tag":39,"props":253,"children":254},{},[255],{"type":19,"value":256},"Можно зафиксировать версию и исходники встроить в build system",{"type":13,"tag":39,"props":258,"children":259},{},[260],{"type":19,"value":261},"У меня с ней очень положительный опыт и не один. Вообще могу всю эту часть взять на себя и гарантировать хороший результат, и быстрый, т.к. изнутри знаю, что там",{"type":13,"tag":39,"props":263,"children":264},{},[265],{"type":19,"value":266},"Будет на несколько % медленнее самописного решения на epoll, но зато mature и не один линукс",{"type":13,"tag":39,"props":268,"children":269},{},[270],{"type":19,"value":271},"Туда же приделывается асинхронность и таймеры, API можно вывести приличное, на std::function, например",{"type":13,"tag":39,"props":273,"children":274},{},[275],{"type":19,"value":276},"Также можно приделать, когда понадобится, http и TLS",{"title":7,"searchDepth":278,"depth":278,"links":279},2,[280],{"id":16,"depth":278,"text":20,"children":281},[282,284,285],{"id":24,"depth":283,"text":27},3,{"id":108,"depth":283,"text":111},{"id":210,"depth":283,"text":213},"markdown","content:docs:core-tech:Proposal-for-I-O-layer-and-P2P.md","content","docs/core-tech/Proposal-for-I-O-layer-and-P2P.md","md",1702260906504]