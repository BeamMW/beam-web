[{"_path":"/docs/core-tech/one-side-payments-(take-2)-deprecated","_dir":"core-tech","_draft":false,"_partial":false,"_locale":"","title":"-- DEPRECATED --","description":"In MW transactions are built interactively, means sender and receiver must collaborate to build a transaction. Here we'll describe a scheme where the sender can pay the receiver without the latter being involved during the payment.","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"deprecated"},"children":[{"type":"text","value":"-- DEPRECATED --"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In MW transactions are built interactively, means sender and receiver must collaborate to build a transaction. Here we'll describe a scheme where the sender can pay the receiver without the latter being involved during the payment."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Previously we described such a scheme that allowed one-side payments, which demanded our extension to MW which we called "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"kernel fusion"}]},{"type":"text","value":". The idea was that the receiver prepares in advance its UTXO + kernel that compensates for its blinding factor. Then in order to pay the sender creates a transaction with this UTXO appended, and another kernel "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"fused"}]},{"type":"text","value":" with that given by the receiver. The drawback of this scheme is that it was possible to transfer fixed values only (that corresponded to the prepared UTXOs)."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here we describe a scheme without this drawback, i.e. where the sender can transfer any amount to the receiver.\nThe idea is to "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"fuse"}]},{"type":"text","value":" UTXOs rather than kernel. The receiver should prepare the UTXO only partially, then the sender would finalize it to accomplish the payment."}]},{"type":"element","tag":"h1","props":{"id":"detailed-description"},"children":[{"type":"text","value":"Detailed description"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The UTXO is redefined, and may optionally contain an "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"extra excess"}]},{"type":"text","value":", which is an arbitrary EC point with the Schnorr's signature that proves there's no value hidden (similar to kernel). So that when the UTXO signature (bulletproof) is created - it signs the visible UTXO Commitment minus the "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"extra excess"}]},{"type":"text","value":", however this "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"excess"}]},{"type":"text","value":" is accounted for in the signature, so that it's not possible to remove it (this is the fusion)."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The receiver picks an arbitrary excess, signs both this excess and the kernel that would compensate for it. In addition it picks the KDF (key deviation function) parameters."}]},{"type":"element","tag":"h1","props":{"id":"comparison-of-both-schemes"},"children":[{"type":"text","value":"Comparison of both schemes"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Kernel fusion\n*"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:docs:core-tech:One-side-payments-(take-2)---DEPRECATED.md","_source":"content","_file":"docs/core-tech/One-side-payments-(take-2)---DEPRECATED.md","_extension":"md"},{"_path":"/docs/core-tech/one-side-payments","_dir":"core-tech","_draft":false,"_partial":false,"_locale":"","title":"One Side Payments","description":"In MW in order to create a valid transaction all the parties must collaborate. Here we'll present a one-side payment scheme, which, after initial setup, allows arbitrary senders to pay specified (fixed) values to a particular receiver, without any further collaboration from the receiver side.","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In MW in order to create a valid transaction all the parties must collaborate. Here we'll present a one-side payment scheme, which, after initial setup, allows arbitrary senders to pay specified (fixed) values to a particular receiver, without any further collaboration from the receiver side."}]},{"type":"element","tag":"h1","props":{"id":"principle"},"children":[{"type":"text","value":"Principle"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In order to receive a payment the receiver creates and publishes the following:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The value that it expects to receive"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"An UTXO (commitment + Bulletproof) that encodes the above value, with arbitrary blinding factor"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"A "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"compensatory"}]},{"type":"text","value":" kernel that compensates for the above blinding factor"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Optionally: a signed payment proof\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Should include the received value, and the above kernel ID"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"No sender address, since it's unknown, plus payment may come from multiple senders"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Should be signed by a private key bound to the receiver identity"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The above UTXO and the kernel form a part of the transaction with zero (or any other "},{"type":"element","tag":"u","props":{},"children":[{"type":"text","value":"known"}]},{"type":"text","value":" value) blinding factor, and a known value on output. Let's call it an "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"acceptor"}]},{"type":"text","value":" part."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In order to pay this receiver the sender create its own transaction part, which has appropriate value on input, and the kernel that compensates for its blinding factor. Call it a "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"donor"}]},{"type":"text","value":" part."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Together those 2 parts form a valid transaction with 2 kernels."}]},{"type":"element","tag":"h1","props":{"id":"why-this-is-not-good-enough"},"children":[{"type":"text","value":"Why this is not good enough"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The above scheme is na√Øve, and there are several problems with it."}]},{"type":"element","tag":"h2","props":{"id":"value-can-be-stolen"},"children":[{"type":"text","value":"Value can be stolen"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"As we said, the above transaction consists of two parts: the "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"donor"}]},{"type":"text","value":" and the "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"acceptor"}]},{"type":"text","value":". Means it's "},{"type":"element","tag":"u","props":{},"children":[{"type":"text","value":"not atomic"}]},{"type":"text","value":". A malicious node may delete the original "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"acceptor"}]},{"type":"text","value":" part, and instead substitute its own, effectively stealing the value."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If the above payment scheme was agreed secretly between the sender and the receiver - still there's a chance the receiver is colluded with the miners."}]},{"type":"element","tag":"h2","props":{"id":"impossible-to-prove-the-payment"},"children":[{"type":"text","value":"Impossible to prove the payment"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Normally the existence of the kernel in the blockchain together with the payment proof signed by the receiver unambiguously prove the payment. However in this case the signed payment proof doesn't include the sender address, and the sender can't prove that the payment was made by him/her."}]},{"type":"element","tag":"h1","props":{"id":"improved-scheme"},"children":[{"type":"text","value":"Improved scheme"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In BEAM the above issues are solved by the following extensions to the protocol."}]},{"type":"element","tag":"h2","props":{"id":"kernel-fusion"},"children":[{"type":"text","value":"Kernel fusion"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In BEAM it's possible to create a transaction kernel which includes \"internally\" arbitrary number of additional ones. The kernel signature accounts for all the contents, so it's not feasible to tamper with it."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"So, in order to send a payment, the sender creates a "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"composite"}]},{"type":"text","value":" kernel, which includes "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"internally"}]},{"type":"text","value":" the receiver compensatory kernel. This makes it impossible for the attacker to remove the receiver kernel, hence the receiver UTXO also must remain. This guarantees the integrity of the transaction."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In addition the sender now has an ability to prove that the payment was made by him/her. For this the sender must do the following:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Locate its composite kernel in the blockchain"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Demonstrate that it includes internally the receiver compensatory kernel, as well as the payment proof signed by the receiver, which means that this receiver kernel means accepting a specific value."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Prove that the composite kernel indeed belongs to the sender\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"It's sufficient to prove the knowledge of the blinding factor of the \"outer\" part of the kernel. Given an arbitrary data, the sender will sign it with its blinding factor. The verifier may check it corresponds to the visible kernel excess."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"This scheme must be elaborated though to prevent MITM attack."}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"duplicated-utxos-are-allowed-in-beam"},"children":[{"type":"text","value":"Duplicated UTXOs are allowed in BEAM"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is important to allow multiple payments, as well as payments in terms of several instances of predefined values."}]},{"type":"element","tag":"h1","props":{"id":"additional-notes-and-caveats"},"children":[{"type":"text","value":"Additional notes and caveats"}]},{"type":"element","tag":"h2","props":{"id":"potential-problem-with-transaction-replaying"},"children":[{"type":"text","value":"Potential problem with transaction replaying"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Assume receiver owns several identical UTXOs, and decides to spend only one of them in a transaction.\nThe problem is that such a transaction can be replayed (repeated) several times, without the permission of the owner, each time it will consume the next such an UTXO."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To prevent this the wallet must NEVER create a transaction that spends only (potentially) duplicated UTXOs. The set of inputs must contain at least 1 unique UTXO, which is not supposed to get duplicated (with non-negligible probability)."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This logic must be implemented in the wallet. In the simplest case the wallet may have a single \"dummy\" UTXO (i.e. with zero value) for this. Whenever necessary it will be used as an input, whereas another unique dummy will be created on output instead of the consumed one."}]},{"type":"element","tag":"h2","props":{"id":"less-anonimity"},"children":[{"type":"text","value":"Less anonimity"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Naturally the described scheme provides less anonymity than the standard MW. This however impacts the receiver only, and basically only those UTXOs used in this scheme."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"value-can-be-stolen","depth":2,"text":"Value can be stolen"},{"id":"impossible-to-prove-the-payment","depth":2,"text":"Impossible to prove the payment"},{"id":"kernel-fusion","depth":2,"text":"Kernel fusion"},{"id":"duplicated-utxos-are-allowed-in-beam","depth":2,"text":"Duplicated UTXOs are allowed in BEAM"},{"id":"potential-problem-with-transaction-replaying","depth":2,"text":"Potential problem with transaction replaying"},{"id":"less-anonimity","depth":2,"text":"Less anonimity"}]}},"_type":"markdown","_id":"content:docs:core-tech:One-side-payments.md","_source":"content","_file":"docs/core-tech/One-side-payments.md","_extension":"md"}]