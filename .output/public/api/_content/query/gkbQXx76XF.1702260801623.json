[{"_path":"/docs/dev/beam-platform-architecture","_dir":"dev","_draft":false,"_partial":false,"_locale":"","title":"Beam Platform Architecture","description":"","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"beam-platform-architecture"},"children":[{"type":"text","value":"Beam Platform Architecture"}]},{"type":"element","tag":"h2","props":{"id":"confidential-assets"},"children":[{"type":"text","value":"Confidential Assets"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Beam Blockchain natively supports creating new types of tokens called Confidential Assets (CA). Confidential Assets inherit all the properties of the Beam Coin (a native token on Beam Blockchain), namely, confidentiality and scalability using MimbleWimble's cut-through process."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Unlike Ethereum ERC-20 contracts, Beam assets are implemented on Layer 1 and are native citizens of Beam's ecosystem. Each Beam transaction can simultaneously include various CA types as inputs and outputs, provided they match the CA type sum to zero, i.e., no type conversion can occur within a transaction."}]},{"type":"element","tag":"h2","props":{"id":"transaction-kernels"},"children":[{"type":"text","value":"Transaction Kernels"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Beam transactions are comprised of inputs and outputs, which are represented by Pedersen Commitments with adjacent zero-knowledge range proofs to ensure committed values are positive within a specific range. While inputs and outputs can be removed during the cut-through process, transaction kernels remain in the blockchain and are crucial for protocol validation. "}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Initially, kernels contained the signed difference between the blinding factors but were extended to support various purposes during Beam's development, including reflecting transaction type and supporting Lelantus shielded pool. Additionally, the kernels were further repurposed to enable the deployment of smart contracts on the Beam blockchain"}]},{"type":"element","tag":"h2","props":{"id":"kernels-with-side-effects"},"children":[{"type":"text","value":"Kernels with Side Effects"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A transaction kernel can identify any side effects, i.e., direct changes to the node state, including transformations to tx inputs and outputs. When this occurs, Beam coins transform into a hybrid UTXO based <> State Based cryptocurrency. When a side effect modifies the outputs, the value stored records on the blockchain as the kernel \"consumed\" the output. This results in the kernel \"emitting\" new inputs using the value stored in the node state."}]},{"type":"element","tag":"h2","props":{"id":"beam-shaders-and-beam-virtual-machine"},"children":[{"type":"text","value":"Beam Shaders and Beam Virtual Machine"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The encapsulation of each node state is done using Beam Shaders while defining the state variables and correlating business logic to modify them. These shaders are coded using WebAssembly (WASM), allowing seamless deployment on Beam Virtual Machines."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Beam uses WASM's binary instruction format for stack-based virtual machines and takes advantage of WASM's industry-standard support for various web for client and server applications. "}]},{"type":"element","tag":"h2","props":{"id":"using-beam-shaders-to-implement-smart-contracts"},"children":[{"type":"text","value":"Using Beam Shaders to Implement Smart Contracts"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For a more technical description of Beam Smart Contracts, read here"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"According to "},{"type":"element","tag":"a","props":{"href":"https://www.investopedia.com/terms/s/smart-contracts.asp","rel":["nofollow"]},"children":[{"type":"text","value":"Investopedia"}]},{"type":"text","value":", Smart Contracts are "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"\"a self-executing contract with the terms of the agreement between buyer and seller being directly written into lines of code\""}]},{"type":"text","value":" Smart Contracts on the Beam blockchain are executed via Beam Shaders."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Each Beam Shader is a collection of state variables and methods, including a constructor and a destructor. The "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"shader constructer"}]},{"type":"text","value":" is only executed once when the Contract Creator defines parameters when registering a new shader. When a new Beam Shader code and construction parameters records on the blockchain, it creates a unique Shader Instance."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"It is important to note the same code with different parameters will produce a distinct unique Shader ID, thus creating a separate Shader Instance."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"destructor"}]},{"type":"text","value":" runs when the Beam Shader is deactivated and cleans all used resources.  A Beam Shader can only be deactivated if it does not contain any funds, preventing the destruction of value during the Shader deactivation process."}]},{"type":"element","tag":"h2","props":{"id":"properties-of-chain-side-beam-shaders"},"children":[{"type":"text","value":"Properties of Chain Side Beam Shaders"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The section below details key properties of smart contract (Beam Chain Side Shaders) implementation on the Beam blockchain."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Beam Shaders utilize several limiting mechanisms (charging execution fees, maximum execution fees) to avoid blocking the node with an unbounded cycle and ensure bounded execution time."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Shaders cannot be automated"}]},{"type":"text","value":" and only record on the blockchain via sent transactions with required parameters, signatures, and fees. "}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Shaders can claim a portion of fees from provided sources of decentralized application requests. Shaders can then store and issue disbursements, including refunding excess payments to special "},{"type":"element","tag":"a","props":{"href":"https://blog.giveth.io/the-vault-contract-open-sourced-by-giveth-fe2261f7b91b","rel":["nofollow"]},"children":[{"type":"text","value":"Vault contracts"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Shaders can communicate with other Shaders to delegate operations in the transaction context, activating the initial Shader on the chain."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The Shader that controls the assets can burn CA emissions, and the shaders defined logic conducts emission burning when manual emission burn cannot function. "}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"When a Shader deploys, it results in one of two outcomes: either the Shader consumes funds (transaction inputs) or unlocks funds (transaction outputs) recorded on the blockchain. "}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Overdraft protection"}]},{"type":"text","value":". BVM only validates equal amounts of locked and unlocked funds to discourage bad actors from creating confidential assets. "}]}]},{"type":"element","tag":"h2","props":{"id":"wallet-side-shaders"},"children":[{"type":"text","value":"Wallet Side Shaders"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Thus far, we have explored smart contracts activated by sent transactions (Chain-side Shaders). We now review the wallet-side architecture, i.e., the framework that interacts with Shaders via new transactions and retrieval of Shader metadata to Beam Wallets."}]},{"type":"element","tag":"h3","props":{"id":"wallet-web-application-platform"},"children":[{"type":"text","value":"Wallet Web Application Platform"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Since v6.0, Beam Desktop Wallets have a built-in web application platform that allows first-party and third-party app development (Mobile version TBA)."}]},{"type":"element","tag":"h3","props":{"id":"the-role-of-wallet-side-shaders"},"children":[{"type":"text","value":"The role of Wallet Side Shaders"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Due to Beam's confidential blockchain ecosystem, any blockchain-altering function requires wallets. Beam's DeFi architecture leverages the Wallet-side shader's client logic and API required for each smart contract, simplifying interactions between wallets and Chain-side Shaders"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Wallet-side Shaders offer great flexibility in separating client and chain-side logic, enabling complex flows that create operations across multiple wallets through a single UI."}]},{"type":"element","tag":"h2","props":{"id":"resources"},"children":[{"type":"text","value":"Resources"}]},{"type":"element","tag":"h3","props":{"id":"concepts"},"children":[{"type":"text","value":"Concepts"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"DLC (Discreet Log Contract)\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://adiabat.github.io/dlc.pdf","rel":["nofollow"]},"children":[{"type":"text","value":"paper"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.youtube.com/watch?v=P6AX8KdXAts","rel":["nofollow"]},"children":[{"type":"text","value":"video"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://medium.com/@gertjaap/discreet-log-contracts-invisible-smart-contracts-on-the-bitcoin-blockchain-cc8afbdbf0db","rel":["nofollow"]},"children":[{"type":"text","value":"article"}]}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"whitepapers"},"children":[{"type":"text","value":"Whitepapers"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.semanticscholar.org/paper/The-Rainbow-Network-%3A-An-Off-Chain-Decentralized-Robinson/03b035bc6fea62caef3455ad383cd7f8164adf2f?p2df","rel":["nofollow"]},"children":[{"type":"text","value":"Rainbow Protocol Whitepaper"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://arwen.io/whitepaper.pdf","rel":["nofollow"]},"children":[{"type":"text","value":"Arwen Protocol Whitepaper"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://compound.finance/documents/Compound.Whitepaper.pdf","rel":["nofollow"]},"children":[{"type":"text","value":"Compound Whitepaper"}]}]}]},{"type":"element","tag":"h3","props":{"id":"wrapped-assets"},"children":[{"type":"text","value":"Wrapped assets"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://tbtc.network/developers/tbtc-technical-system-overview/","rel":["nofollow"]},"children":[{"type":"text","value":"tBTC - Bitcoin on Ethereum via Liquid"}]}]}]},{"type":"element","tag":"h3","props":{"id":"terms"},"children":[{"type":"text","value":"Terms"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://defitutorials.substack.com/p/collateralized-debt-positions-cdps","rel":["nofollow"]},"children":[{"type":"text","value":"Collateralized Debt Position"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"confidential-assets","depth":2,"text":"Confidential Assets"},{"id":"transaction-kernels","depth":2,"text":"Transaction Kernels"},{"id":"kernels-with-side-effects","depth":2,"text":"Kernels with Side Effects"},{"id":"beam-shaders-and-beam-virtual-machine","depth":2,"text":"Beam Shaders and Beam Virtual Machine"},{"id":"using-beam-shaders-to-implement-smart-contracts","depth":2,"text":"Using Beam Shaders to Implement Smart Contracts"},{"id":"properties-of-chain-side-beam-shaders","depth":2,"text":"Properties of Chain Side Beam Shaders"},{"id":"wallet-side-shaders","depth":2,"text":"Wallet Side Shaders","children":[{"id":"wallet-web-application-platform","depth":3,"text":"Wallet Web Application Platform"},{"id":"the-role-of-wallet-side-shaders","depth":3,"text":"The role of Wallet Side Shaders"}]},{"id":"resources","depth":2,"text":"Resources","children":[{"id":"concepts","depth":3,"text":"Concepts"},{"id":"whitepapers","depth":3,"text":"Whitepapers"},{"id":"wrapped-assets","depth":3,"text":"Wrapped assets"},{"id":"terms","depth":3,"text":"Terms"}]}]}},"_type":"markdown","_id":"content:docs:dev:beam-platform-architecture.md","_source":"content","_file":"docs/dev/beam-platform-architecture.md","_extension":"md"}]