[{"_path":"/docs/core-tech/one-side-payments-(take-2)-deprecated","_dir":"core-tech","_draft":false,"_partial":false,"_locale":"","title":"-- DEPRECATED --","description":"In MW transactions are built interactively, means sender and receiver must collaborate to build a transaction. Here we'll describe a scheme where the sender can pay the receiver without the latter being involved during the payment.","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"deprecated"},"children":[{"type":"text","value":"-- DEPRECATED --"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In MW transactions are built interactively, means sender and receiver must collaborate to build a transaction. Here we'll describe a scheme where the sender can pay the receiver without the latter being involved during the payment."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Previously we described such a scheme that allowed one-side payments, which demanded our extension to MW which we called "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"kernel fusion"}]},{"type":"text","value":". The idea was that the receiver prepares in advance its UTXO + kernel that compensates for its blinding factor. Then in order to pay the sender creates a transaction with this UTXO appended, and another kernel "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"fused"}]},{"type":"text","value":" with that given by the receiver. The drawback of this scheme is that it was possible to transfer fixed values only (that corresponded to the prepared UTXOs)."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here we describe a scheme without this drawback, i.e. where the sender can transfer any amount to the receiver.\nThe idea is to "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"fuse"}]},{"type":"text","value":" UTXOs rather than kernel. The receiver should prepare the UTXO only partially, then the sender would finalize it to accomplish the payment."}]},{"type":"element","tag":"h1","props":{"id":"detailed-description"},"children":[{"type":"text","value":"Detailed description"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The UTXO is redefined, and may optionally contain an "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"extra excess"}]},{"type":"text","value":", which is an arbitrary EC point with the Schnorr's signature that proves there's no value hidden (similar to kernel). So that when the UTXO signature (bulletproof) is created - it signs the visible UTXO Commitment minus the "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"extra excess"}]},{"type":"text","value":", however this "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"excess"}]},{"type":"text","value":" is accounted for in the signature, so that it's not possible to remove it (this is the fusion)."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The receiver picks an arbitrary excess, signs both this excess and the kernel that would compensate for it. In addition it picks the KDF (key deviation function) parameters."}]},{"type":"element","tag":"h1","props":{"id":"comparison-of-both-schemes"},"children":[{"type":"text","value":"Comparison of both schemes"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Kernel fusion\n*"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:docs:core-tech:One-side-payments-(take-2)---DEPRECATED.md","_source":"content","_file":"docs/core-tech/One-side-payments-(take-2)---DEPRECATED.md","_extension":"md"}]