[{"_path":"/docs/core-tech/programming-beam-wallet-transactions","_dir":"core-tech","_draft":false,"_partial":false,"_locale":"","title":"Programming Beam Wallet Transactions","description":"This section describes the structure of Beam transactions. Transactions are created and managed locally in the Beam wallet.","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This section describes the structure of Beam transactions. Transactions are created and managed locally in the Beam wallet."}]},{"type":"element","tag":"h2","props":{"id":"transaction-parameters"},"children":[{"type":"text","value":"Transaction parameters"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Transactions are defined and stored in the database as a set of transaction parameters, thus allowing a lot of flexibility."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The complete list of transaction parameters is defined "},{"type":"element","tag":"a","props":{"href":"https://github.com/BeamMW/beam/blob/edf0bb8a16626f6e1160bc09a7af4e0a40adb813/wallet/common.h#L226","rel":["nofollow"]},"children":[{"type":"text","value":"here"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Transaction parameters are divided into two groups. "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Public"}]},{"type":"text","value":" parameters can be set during the interaction between wallets. Once public parameter is set, it can not be changed. "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Private"}]},{"type":"text","value":" parameters, can be set and reset at any time within the wallet and are not sent outside the wallet. The reason for this separation is to maintain a clear distinction between the parameters that are revealed to or received from the other wallet and can thus irreversibly affect the state of negotiation between the wallets creating the transaction."}]},{"type":"element","tag":"h2","props":{"id":"transaction-id"},"children":[{"type":"text","value":"Transaction id"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"TxID, "},{"type":"element","tag":"a","props":{"href":"https://github.com/BeamMW/beam/blob/edf0bb8a16626f6e1160bc09a7af4e0a40adb813/wallet/common.h#L37","rel":["nofollow"]},"children":[{"type":"text","value":"defined here"}]},{"type":"text","value":" is the unique id of the transaction"}]},{"type":"element","tag":"h2","props":{"id":"itransaction-interface-definition"},"children":[{"type":"text","value":"ITransaction interface "},{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":" "},{"type":"element","tag":"a","props":{"href":"https://github.com/BeamMW/beam/blob/edf0bb8a16626f6e1160bc09a7af4e0a40adb813/wallet/base_transaction.h#L28","rel":["nofollow"]},"children":[{"type":"text","value":"definition"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Defines basic set of operations for each transaction, Update, Cancel and Rollback"}]},{"type":"element","tag":"pre","props":{"className":["language-c++"],"code":"struct ITransaction\n    {\n        using Ptr = std::shared_ptr<ITransaction>;\n        virtual TxType GetType() const = 0;\n        virtual void Update() = 0;\n        virtual void Cancel() = 0;\n        virtual bool Rollback(Height height) = 0;\n    };\n\n","language":"c++","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"struct ITransaction\n    {\n        using Ptr = std::shared_ptr<ITransaction>;\n        virtual TxType GetType() const = 0;\n        virtual void Update() = 0;\n        virtual void Cancel() = 0;\n        virtual bool Rollback(Height height) = 0;\n    };\n\n"}]}]},{"type":"element","tag":"h2","props":{"id":"basetransaction-definition"},"children":[{"type":"text","value":"BaseTransaction "},{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":" "},{"type":"element","tag":"a","props":{"href":"https://github.com/BeamMW/beam/blob/edf0bb8a16626f6e1160bc09a7af4e0a40adb813/wallet/base_transaction.h#L55","rel":["nofollow"]},"children":[{"type":"text","value":"definition"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Implements the ITransaction interface and provides the state machine for creation of transactions. Constructor for BaseTransaction receives three parameters:"}]},{"type":"element","tag":"pre","props":{"className":["language-c++"],"code":"\nBaseTransaction(INegotiatorGateway& gateway, beam::IWalletDB::Ptr walletDB, const TxID& txID);\n\n","language":"c++","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\nBaseTransaction(INegotiatorGateway& gateway, beam::IWalletDB::Ptr walletDB, const TxID& txID);\n\n"}]}]},{"type":"element","tag":"h2","props":{"id":"basetxbuilder"},"children":[{"type":"text","value":"BaseTxBuilder"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This class encapsulates all the methods necessary for transaction creation following the protocol described "},{"type":"element","tag":"a","props":{"href":"https://github.com/BeamMW/beam/wiki/Transaction-creation-protocol","rel":["nofollow"]},"children":[{"type":"text","value":"here"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h2","props":{"id":"inegotiatorgateway-definition"},"children":[{"type":"text","value":"INegotiatorGateway "},{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":" "},{"type":"element","tag":"a","props":{"href":"https://github.com/BeamMW/beam/blob/edf0bb8a16626f6e1160bc09a7af4e0a40adb813/wallet/common.h#L409","rel":["nofollow"]},"children":[{"type":"text","value":"definition"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Negotiator Gateway provides an abstraction of the messaging between the node or another wallet during the transaction creation. The INegotiatorGateway interface is implemented by the Wallet class."}]},{"type":"element","tag":"h2","props":{"id":"basetransactionupdate-method"},"children":[{"type":"text","value":"BaseTransaction::Update method"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The Update method describes generic logic of asynchronous transaction update. The update logic is implemented in the UpdateImpl method described below."}]},{"type":"element","tag":"pre","props":{"className":["language-c++"],"code":"\nvoid BaseTransaction::Update()\n    {\n        AsyncContextHolder async(m_Gateway);\n        try\n        {\n            if (CheckExternalFailures())\n            {\n                return;\n            }\n\n            UpdateImpl();\n\n            CheckExpired();\n        }\n        catch (const TransactionFailedException& ex)\n        {\n            LOG_ERROR() << GetTxID() << \" exception msg: \" << ex.what();\n            OnFailed(ex.GetReason(), ex.ShouldNofify());\n        }\n        catch (const exception& ex)\n        {\n            LOG_ERROR() << GetTxID() << \" exception msg: \" << ex.what();\n            OnFailed(TxFailureReason::Unknown);\n        }\n    }\n\n","language":"c++","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\nvoid BaseTransaction::Update()\n    {\n        AsyncContextHolder async(m_Gateway);\n        try\n        {\n            if (CheckExternalFailures())\n            {\n                return;\n            }\n\n            UpdateImpl();\n\n            CheckExpired();\n        }\n        catch (const TransactionFailedException& ex)\n        {\n            LOG_ERROR() << GetTxID() << \" exception msg: \" << ex.what();\n            OnFailed(ex.GetReason(), ex.ShouldNofify());\n        }\n        catch (const exception& ex)\n        {\n            LOG_ERROR() << GetTxID() << \" exception msg: \" << ex.what();\n            OnFailed(TxFailureReason::Unknown);\n        }\n    }\n\n"}]}]},{"type":"element","tag":"h2","props":{"id":"simpletransaction-wallet_transactionh"},"children":[{"type":"text","value":"SimpleTransaction ( "},{"type":"element","tag":"a","props":{"href":"https://github.com/BeamMW/beam/blob/edf0bb8a16626f6e1160bc09a7af4e0a40adb813/wallet/wallet_transaction.h#L1","rel":["nofollow"]},"children":[{"type":"text","value":"wallet_transaction.h"}]},{"type":"text","value":" )"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"SimpleTransaction extends BaseTransaction and provides an implementation of the basic confidential transaction between two wallets. The key part of the implementation is the "},{"type":"element","tag":"code","props":{"className":""},"children":[{"type":"text","value":"void SimpleTransaction::UpdateImpl()"}]},{"type":"text","value":" method that provides the state machine for the transaction creation logic."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"//TODO: Add detailed explanation for the transaction creation logic"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"transaction-parameters","depth":2,"text":"Transaction parameters"},{"id":"transaction-id","depth":2,"text":"Transaction id"},{"id":"itransaction-interface-definition","depth":2,"text":"ITransaction interface  definition"},{"id":"basetransaction-definition","depth":2,"text":"BaseTransaction  definition"},{"id":"basetxbuilder","depth":2,"text":"BaseTxBuilder"},{"id":"inegotiatorgateway-definition","depth":2,"text":"INegotiatorGateway  definition"},{"id":"basetransactionupdate-method","depth":2,"text":"BaseTransaction::Update method"},{"id":"simpletransaction-wallet_transactionh","depth":2,"text":"SimpleTransaction ( wallet_transaction.h )"}]}},"_type":"markdown","_id":"content:docs:core-tech:Programming-Beam-Wallet-Transactions.md","_source":"content","_file":"docs/core-tech/Programming-Beam-Wallet-Transactions.md","_extension":"md"},{"_path":"/docs/core-tech/programming-beam-wallet","_dir":"core-tech","_draft":false,"_partial":false,"_locale":"","title":"Programming Beam Wallet","description":"","body":{"type":"root","children":[{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The following document is still under construction and is subject to changes"}]}]},{"type":"element","tag":"h2","props":{"id":"key-differences-of-mimblewimble-wallets"},"children":[{"type":"text","value":"Key Differences of Mimblewimble Wallets"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Since Beam is an implementation of the Mimblewimble protocol, it has all the nuances that are specific to this protocol and have a huge impact on the wallet architecture, making it very different in comparison to most existing cryptocurrencies. Such changes include:"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Not all the information can be extracted from the blockchain. In fact, only the UTXOs are stored in the blockchain, hence all additional information regarding transactions, addresses etc... has to be locally stored in the wallet."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Transaction is created interactively by both the sender and the receiver. Hence, a state machine and communication model is required between two wallets, a problem which does not exist in Bitcoin and most other cryprocurrencies where transaction can be created by a single wallet and immediately sent to the network."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This means that Beam Wallet has several different responsibilities:"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Storing and managing the list of Coins (UTXO set)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Storing and managing SBBS Addresses (described below) for communication between wallets"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Allow wallet to wallet (W2W) communications and interactive creation of new transactions"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Handle wallet to node (W2N) communications, send transactions to the node, request proofs for kernels and UTXOs and process blockchain updates and manage transaction and Coin state"}]}]},{"type":"element","tag":"h2","props":{"id":"wallet-code-structure-and-high-level-architecture"},"children":[{"type":"text","value":"Wallet Code Structure and High Level Architecture"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Beam Wallet has the following conceptual modules (located in the wallet folder)"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":""},"children":[{"type":"text","value":"core"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/BeamMW/beam/wiki/Beam-Wallet-Database","rel":["nofollow"]},"children":[{"type":"text","value":"database"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/BeamMW/beam/wiki/Programming-Beam-Wallet-Transactions","rel":["nofollow"]},"children":[{"type":"text","value":"transactions"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":""},"children":[{"type":"text","value":"wallet"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":""},"children":[{"type":"text","value":"wallet_client"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The structure of the files and folders is currently being refactored to match the structure described above"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"key-differences-of-mimblewimble-wallets","depth":2,"text":"Key Differences of Mimblewimble Wallets"},{"id":"wallet-code-structure-and-high-level-architecture","depth":2,"text":"Wallet Code Structure and High Level Architecture"}]}},"_type":"markdown","_id":"content:docs:core-tech:Programming-Beam-Wallet.md","_source":"content","_file":"docs/core-tech/Programming-Beam-Wallet.md","_extension":"md"}]